{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Campachoochoo Chronicles",
  "language": "en",
  "home_page_url": "https://chronicles.campachoochoo.net/",
  "feed_url": "https://chronicles.campachoochoo.net/feed.json",
  "description": "pwrignall&#39;s internet space on coding, creations, side projects.",
  "author": {
    "name": "pwrignall",
    "url": "https://github.com/pwrignall/"
  },
  "items": [{
      "id": "https://chronicles.campachoochoo.net/laptop-server-setup/",
      "url": "https://chronicles.campachoochoo.net/laptop-server-setup/",
      "title": "Setting up a laptop as a server",
      "content_html": "<p>I’ve set up an old laptop as a home server and wanted to write up some of the configuration and setup steps for future reference.</p>\n<p>It’s an old Lenovo ThinkPad X121e laptop from 2011 on which I’ve installed Ubuntu server 24.04. There are just a couple of configuration tweaks I wanted to make.</p>\n<p>I’ll also try to remember to add anything else I needed to adjust from the defaults to get things working how I need them to.</p>\n<h2 id=\"lid-closure-behaviour\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/laptop-server-setup/#lid-closure-behaviour\">Lid closure behaviour</a></h2>\n<h3 id=\"don-t-sleep-when-the-lid-is-closed\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/laptop-server-setup/#don-t-sleep-when-the-lid-is-closed\">Don’t sleep when the lid is closed</a></h3>\n<p>The nice thing about using a laptop as a server is that problems connecting via SSH can be easily overcome by using the in-built screen and keyboard!\nBut most of the time the machine is sitting with the lid closed on my desk. I didn’t want it to go to sleep when I shut the lid. (<a href=\"https://askubuntu.com/questions/15520/how-can-i-tell-ubuntu-to-do-nothing-when-i-close-my-laptop-lid\">Source</a>)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Add or edit to /etc/systemd/logind.conf (needs sudo)</span>\n<span class=\"token assign-left variable\">HandleLidSwitch</span><span class=\"token operator\">=</span>ignore</code></pre>\n<p>Then <code>sudo service systemd_logind restart</code></p>\n<h3 id=\"switching-the-screen-off-when-not-in-use\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/laptop-server-setup/#switching-the-screen-off-when-not-in-use\">Switching the screen off when not in use</a></h3>\n<p>Similarly, I don’t want the screen to stay on all the time when the lid is usually closed. (<a href=\"https://askubuntu.com/a/1076734\">Source</a>)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Add to /etc/default/grub (needs sudo)</span>\n<span class=\"token assign-left variable\">GRUB_CMDLINE_LINUX_DEFAULT</span><span class=\"token operator\">=</span><span class=\"token string\">\"consoleblank=60\"</span></code></pre>\n",
      "date_published": "2024-09-21T00:00:00Z"
    },{
      "id": "https://chronicles.campachoochoo.net/data-type-portability-guide/",
      "url": "https://chronicles.campachoochoo.net/data-type-portability-guide/",
      "title": "Data type portability guide",
      "content_html": "<p>This is an opinionated guide to creating physical data models with data types that are portable across MariaDB, PostgreSQL and Snowflake.</p>\n<p>Other database flavours are available but not covered in this guide.</p>\n<aside>Adapted/copied from a document written by my data modelling colleague, Stuart Atkins.</aside>\n<p>“Portable” means the same <abbr title=\"Data Definition Language\">DDL</abbr> code — <code>CREATE TABLE</code>, <code>ALTER TABLE</code>, etc. — can be used unchanged across all of these databases. Using data types other than these means that DDL will require some conversion to port it.</p>\n<blockquote>\n<p>If you know for sure that your DDL code will never need to be portable then in addition to being highly prescient you are, of course, free to use all of the data types supported by your <abbr title=\"Database management system\">DBMS</abbr>.</p>\n<p>Or, if your requirement for portability is limited to only two of these databases, then you can look up the <a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#data-type-comparisons\">Comparison</a> section of this guide to determine which data types are portable across the databases you will be using.</p>\n<p>– <cite>Stuart Atkins</cite></p>\n</blockquote>\n<ul>\n<li><a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#portable-data-types\">Portable data types</a>\n<ul>\n<li><a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#donts\">Don’ts</a></li>\n<li><a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#be-aware\">Be aware</a></li>\n</ul>\n</li>\n<li><a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#data-type-comparisons\">Data type comparisons</a>\n<ul>\n<li><a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#numeric\">Numeric</a></li>\n<li><a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#alphanumeric\">Alphanumeric</a></li>\n<li><a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#temporal\">Temporal</a></li>\n<li><a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#spatial\">Spatial</a></li>\n<li><a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#arrays\">Arrays</a></li>\n</ul>\n</li>\n<li><a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#data-type-details\">Data type details</a>\n<ul>\n<li><a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#numeric-1\">Numeric</a></li>\n<li><a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#alphanumeric-1\">Alphanumeric</a></li>\n<li><a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#temporal-1\">Temporal</a></li>\n<li><a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#spatial-1\">Spatial</a></li>\n<li><a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#arrays-1\">Arrays</a></li>\n<li><a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#special-types\">Special types</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"portable-data-types\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#portable-data-types\">Portable data types</a></h2>\n<table>\n<thead>\n<tr>\n<th>Numeric</th>\n<th>Alphanumeric</th>\n<th>Temporal</th>\n<th>Spatial</th>\n<th>Arrays</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>SMALLINT</code><br /><code>INT</code>/<code>INTEGER</code><br /><code>BIGINT</code><br /><code>DECIMAL</code>/<code>NUMERIC</code><br /><code>DOUBLE PRECISION</code><br /><code>BOOLEAN</code></td>\n<td><code>CHAR</code><br /><code>TEXT</code><br /><code>VARCHAR</code></td>\n<td><code>DATE</code><br /><code>TIME</code><br /><code>TIMESTAMP</code></td>\n<td><code>POINT</code><br /><code>POLYGON</code></td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"don-ts\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#don-ts\">Don’ts</a></h3>\n<h4 id=\"numeric\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#numeric\">Numeric <!-- omit in toc --></a></h4>\n<ul>\n<li><strong>Don’t</strong> use <strong>unsigned numeric types</strong> (i.e. positive-only) as they are not supported by PostgreSQL.</li>\n<li><strong>Don’t</strong> use <code>SERIAL</code> or <code>BIGSERIAL</code> because they are unsigned in MariaDB, signed in PostgreSQL and not supported by Snowflake. Also, <code>SERIAL</code> is a <code>BIGINT</code> in MariaDB but only an <code>INTEGER</code> in PostgreSQL. Instead of <code>SERIAL</code> use <code>INT</code>/<code>BIGINT AUTOINCREMENT</code>.</li>\n<li><strong>Don’t</strong> use <code>DOUBLE</code>, instead use <code>DOUBLE PRECISION</code> as <code>DOUBLE</code> is not supported by PostgreSQL.</li>\n<li><strong>Don’t</strong> use <code>FLOAT</code> because it is 4-byte in MariaDB but 8-byte in PostgreSQL and Snowflake. Instead use <code>DOUBLE PRECISION</code>.</li>\n<li><strong>Don’t</strong> use <code>INT(n)</code> even though the display width <code>(n)</code> is automatically created by MariaDB DDL generation tools, because only MariaDB supports it. Specifying it in DDL reduces portability of the DDL.</li>\n<li><strong>Don’t</strong> use <code>BOOL</code> as it is not supported by PostgreSQL or Snowflake. Use <code>BOOLEAN</code> instead.</li>\n</ul>\n<h4 id=\"alphanumeric\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#alphanumeric\">Alphanumeric <!-- omit in toc --></a></h4>\n<ul>\n<li><strong>Don’t</strong> use <code>BINARY</code> as PostgreSQL calls it <code>BYTEA</code>.</li>\n<li><strong>Don’t</strong> use <code>BLOB</code>s as they are not supported by PostgreSQL or Snowflake.</li>\n<li><strong>Don’t</strong> use <code>JSON</code> as behaviour is different across MariaDB and PostgreSQL and it is not supported by Snowflake. Instead you can use tables with key-value pairs or use <code>TEXT</code> fields.</li>\n<li><strong>Don’t</strong> use <code>XML</code> as only PostgreSQL supports it.</li>\n<li><strong>Don’t</strong> use <code>UUID</code>s as they are not supported by Snowflake.</li>\n<li><strong>Don’t</strong> use <code>ENUM</code>s as they are not supported by Snowflake.</li>\n</ul>\n<h4 id=\"temporal\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#temporal\">Temporal <!-- omit in toc --></a></h4>\n<ul>\n<li><strong>Don’t</strong> use <code>DATETIME</code> as PostgreSQL does not support it.</li>\n</ul>\n<h4 id=\"spatial\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#spatial\">Spatial <!-- omit in toc --></a></h4>\n<ul>\n<li><strong>Don’t</strong> use most spatial types, the exceptions being <code>POINT</code> and <code>POLYGON</code>. Decompose them into tables instead. However there is much greater compatibility between MariaDB and Snowflake so if you don’t need to use PostgreSQL then <a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#spatial-1\">more spatial types</a> will be available to you.</li>\n</ul>\n<h4 id=\"arrays\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#arrays\">Arrays <!-- omit in toc --></a></h4>\n<ul>\n<li><strong>Don’t</strong> use <code>ARRAY</code> types. They are not supported at all by MariaDB and their implementation is very different in PostgreSQL and Snowflake. Instead, decompose or normalise <code>ARRAY</code>s into tables.</li>\n</ul>\n<h3 id=\"be-aware\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#be-aware\">Be aware</a></h3>\n<ul>\n<li>All numeric data types in Snowflake are 8-byte.</li>\n<li>Numeric data types have different ranges in each database (see <a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#numeric-2\">Numeric data type details</a>).</li>\n<li><code>TIMESTAMP</code> is stored internally in MariaDB in a different format from <code>DATETIME</code>.</li>\n<li>Temporal types have different ranges in each DBMS (see <a href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#temporal-2\">Temporal data type details</a>).\nWhen migrating data to another DBMS, temporal types should be converted to string when outbound and then converted into the new host format on input.</li>\n<li>Arithmetic with <code>FLOAT</code> and <code>DOUBLE PRECISION</code> can be inaccurate. If you need accuracy for arithmetic you can use <code>DECIMAL</code>/<code>NUMERIC</code> but computations are likely to take approximately four times longer as modern CPUs have built-in support for floating-point arithmetic but not fixed-point arithmetic. Watch this <a href=\"https://youtu.be/f4ekifyijIg?si=20YtOngwh0rDXdUv\">video on floating point numbers</a> for an explainer.</li>\n</ul>\n<h2 id=\"data-type-comparisons\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#data-type-comparisons\">Data type comparisons</a></h2>\n<h3 id=\"numeric-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#numeric-1\">Numeric</a></h3>\n<table>\n<thead>\n<tr>\n<th>MariaDB</th>\n<th>PostgreSQL</th>\n<th>Snowflake</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>TINYINT</code>, <code>INT1</code>, <code>BOOLEAN</code> (synonym for <code>TINYINT(1)</code>)</td>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>SMALLINT</code>, <code>INT2</code></td>\n<td><code>SMALLINT</code>, <code>INT2</code><br /><br /><code>SMALLSERIAL</code> is autoincrementing and has an alias of <code>SERIAL2</code>.</td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>MEDIUMINT</code>, <code>INT3</code></td>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>INT</code>, <code>INTEGER</code>, <code>INT4</code></td>\n<td><code>INTEGER</code>, <code>INT</code>, <code>INT4</code><br /><br /><code>SERIAL</code> is autoincrementing and has an alias of <code>SERIAL4</code>.</td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>BIGINT</code>, <code>INT</code><br /><br /><code>SERIAL</code> is a synonym for <code>BIGINT UNSIGNED NOT NULL AUTO_INCREMENT</code>.</td>\n<td><code>BIGINT</code>, <code>INT8</code><br /><br /><code>BIGSERIAL</code> is autoincrementing and has an alias of <code>SERIAL8</code>.</td>\n<td><code>INT</code>, <code>INTEGER</code>, <code>BYTEINT</code>, <code>TINYINT</code>, <code>SMALLINT</code>, <code>BIGINT</code><br /><br />Synonymous with <code>NUMBER(38,0)</code>.</td>\n</tr>\n<tr>\n<td><code>DECIMAL</code>, <code>DEC</code>, <code>NUMERIC</code>, <code>FIXED</code> (Precision, Scale)</td>\n<td><code>DECIMAL</code>, <code>NUMERIC</code> (Precision, Scale)</td>\n<td><code>DECIMAL</code>, <code>NUMERIC</code> (Precision, Scale)<br /><br />Synonymous with <code>NUMBER</code>.</td>\n</tr>\n<tr>\n<td><code>FLOAT</code></td>\n<td><code>REAL</code>, <code>FLOAT4</code></td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>DOUBLE</code>, <code>DOUBLE PRECISION</code>, <code>REAL</code></td>\n<td><code>DOUBLE PRECISION</code>, <code>FLOAT</code>, <code>FLOAT8</code></td>\n<td><code>FLOAT</code>, <code>FLOAT4</code>, <code>FLOAT8</code>, <code>DOUBLE</code>, <code>DOUBLE PRECISION</code>, <code>REAL</code></td>\n</tr>\n<tr>\n<td><code>BIT(n)</code></td>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>BOOLEAN</code>, <code>BOOL</code><br /><br />Synonym for <code>TINYINT(1)</code>.</td>\n<td><code>BOOLEAN</code></td>\n<td><code>BOOLEAN</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"alphanumeric-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#alphanumeric-1\">Alphanumeric</a></h3>\n<table>\n<thead>\n<tr>\n<th>MariaDB</th>\n<th>PostgreSQL</th>\n<th>Snowflake</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>BINARY(n)</code><br /><br /><code>CHARBYTE</code> is an alias for <code>BINARY(1)</code>.</td>\n<td><code>BYTEA</code></td>\n<td><code>BINARY(n)</code></td>\n</tr>\n<tr>\n<td><code>VARBINARY(n)  </code></td>\n<td>–</td>\n<td><code>VARBINARY(n)</code></td>\n</tr>\n<tr>\n<td><code>TINYBLOB</code></td>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>BLOB</code> (Binary large object)</td>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>MEDIUMBLOB</code></td>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>LONGBLOB</code><br /><br />In Oracle Mode, <code>BLOB</code> is a synonym for <code>LONGBLOB</code>.</td>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td>–<br /><br />But see <code>LONGTEXT</code>/<code>JSON</code> below.</td>\n<td><code>JSON</code>, <code>JSONB</code>, <code>XML</code></td>\n<td>–<br /><br />But see <code>VARIANT</code> and <code>OBJECT</code> in <code>ARRAY</code>s.</td>\n</tr>\n<tr>\n<td><code>TINYTEXT</code><br /><code>TEXT</code><br /><code>MEDIUMTEXT</code><br /><code>LONG</code>, <code>LONG VARCHAR</code><br /><code>LONGTEXT</code>, <code>JSON</code> (for compatibility with MySQL).</td>\n<td><code>TEXT</code></td>\n<td><code>VARCHAR(n)</code><br /><code>TEXT(n)</code><br /><code>STRING(n)</code></td>\n</tr>\n<tr>\n<td><code>CHAR(n)</code></td>\n<td><code>CHAR(n)</code><br /><code>CHARACTER(n)</code>, <code>BPCHAR(n)</code></td>\n<td><code>CHAR(n)</code><br /><code>CHARACTER(n)</code></td>\n</tr>\n<tr>\n<td><code>VARCHAR(n)</code></td>\n<td><code>VARCHAR(n)</code><br /><code>CHARACTER VARYING(n)</code><br /><br /><code>BPCHAR</code></td>\n<td><code>NCHAR(n)</code><br /><code>NVARCHAR(n)</code></td>\n</tr>\n<tr>\n<td><code>UUID</code></td>\n<td><code>UUID</code></td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>ENUM</code></td>\n<td><code>ENUM</code></td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>SET</code></td>\n<td>–</td>\n<td>–</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"temporal-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#temporal-1\">Temporal</a></h3>\n<table>\n<thead>\n<tr>\n<th>MariaDB</th>\n<th>PostgreSQL</th>\n<th>Snowflake</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DATE</code></td>\n<td><code>DATE</code></td>\n<td><code>DATE</code></td>\n</tr>\n<tr>\n<td><code>TIME(n)</code></td>\n<td><code>TIME(n)</code><br /><br /><code>WITHOUT TIME ZONE</code> or <code>WITH TIME ZONE</code></td>\n<td><code>TIME(n)</code></td>\n</tr>\n<tr>\n<td><code>DATETIME(n)</code></td>\n<td><code>TIMESTAMP(n)</code></td>\n<td><code>TIMESTAMP(n)</code><br /><code>DATETIME(n)</code><br /><br /><code>TIMESTAMP_NTZ(n)</code>, <code>TIMESTAMPNTZ(n)</code>,<code>TIMESTAMP WITHOUT TIME ZONE(n)</code><br /><br /><code>TIMESTAMP_LTZ(n)</code>, <code>TIMESTAMPLTZ(n)</code>, <code>TIMESTAMP WITH LOCAL TIME ZONE(n)</code><br /><br /><code>TIMESTAMP_TZ(n)</code>, <code>TIMESTAMPTZ(n)</code>, <code>TIMESTAMP WITH TIME ZONE(n)</code></td>\n</tr>\n<tr>\n<td><code>TIMESTAMP(n)</code></td>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>YEAR(n)</code></td>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td>–</td>\n<td><code>INTERVAL</code></td>\n<td>–</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"spatial-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#spatial-1\">Spatial</a></h3>\n<table>\n<thead>\n<tr>\n<th>MariaDB</th>\n<th>PostgreSQL</th>\n<th>Snowflake</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>POINT</code></td>\n<td><code>POINT</code></td>\n<td><code>POINT</code></td>\n</tr>\n<tr>\n<td><code>LINESTRING</code></td>\n<td><code>LINE</code><br /><br /><code>LINE SEGMENT</code><br /><br /><code>PATH</code></td>\n<td><code>LINESTRING</code></td>\n</tr>\n<tr>\n<td>–</td>\n<td><code>BOX</code></td>\n<td>–</td>\n</tr>\n<tr>\n<td>–</td>\n<td><code>CIRCLE</code></td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>POLYGON</code></td>\n<td><code>POLYGON</code></td>\n<td><code>POLYGON</code></td>\n</tr>\n<tr>\n<td><code>MULTIPOINT</code></td>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>MULTILINESTRING</code></td>\n<td>–</td>\n<td><code>MULTILINESTRING</code></td>\n</tr>\n<tr>\n<td><code>MULTIPOLYGON</code></td>\n<td>–</td>\n<td><code>MULTIPOLYGON</code></td>\n</tr>\n<tr>\n<td><code>GEOMETRY</code></td>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>GEOMETRYCOLLECTION</code></td>\n<td>–</td>\n<td><code>GEOMETRYCOLLECTION</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"arrays-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#arrays-1\">Arrays</a></h3>\n<table>\n<thead>\n<tr>\n<th>MariaDB</th>\n<th>PostgreSQL</th>\n<th>Snowflake</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>–</td>\n<td><code>Datatype[n]</code><br /><br /><code>Datatype ARRAY[n]</code></td>\n<td>–</td>\n</tr>\n<tr>\n<td>–</td>\n<td><code>Datatype[na][nb]…</code></td>\n<td>–</td>\n</tr>\n<tr>\n<td>–</td>\n<td>–</td>\n<td>Unstructured (or semi-structured) <code>VARIANT</code></td>\n</tr>\n<tr>\n<td>–</td>\n<td>–</td>\n<td>Unstructured (or semi-structured) <code>ARRAY</code></td>\n</tr>\n<tr>\n<td>–</td>\n<td>–</td>\n<td>Unstructured (or semi-structured) <code>OBJECT</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"data-type-details\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#data-type-details\">Data type details</a></h2>\n<h3 id=\"numeric-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#numeric-2\">Numeric</a></h3>\n<h4 id=\"mariadb\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#mariadb\">MariaDB <!-- omit in toc --></a></h4>\n<table>\n<thead>\n<tr>\n<th>Data types and aliases</th>\n<th>Bytes/range</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>TINYINT</code>, <code>INT1</code></td>\n<td>1 byte.<br /><br />Signed: -128 to 127.<br />Unsigned: 0 to 255.</td>\n</tr>\n<tr>\n<td><code>SMALLINT</code>, <code>INT2</code></td>\n<td>2 bytes.<br /><br />Signed: -32,768 to 32,767.<br />Unsigned: 0 to 65,535.</td>\n</tr>\n<tr>\n<td><code>MEDIUMINT</code>, <code>INT3</code></td>\n<td>3 bytes.<br /><br />Signed: -8,388,608 to 8,388,607.<br />Unsigned: 0 to 16777215.</td>\n</tr>\n<tr>\n<td><code>INT</code>, <code>INTEGER</code>, <code>INT4</code></td>\n<td>4 bytes.<br /><br />Signed: -2,147,483,648 to 2,147,483,647.<br />Unsigned: 0 to 4,294,967,295.</td>\n</tr>\n<tr>\n<td><code>BIGINT</code>, <code>INT8</code><br /><code>SERIAL</code> is a synonym for <code>BIGINT UNSIGNED NOT NULL AUTO_INCREMENT</code>.</td>\n<td>8 bytes.<br /><br />Signed: -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.<br />Unsigned:  0 to 18,446,744,073,709,551,615.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>(n)</code> defines the max display width. It only has a real effect when used with <code>ZEROFILL</code> to fill the max display width with leading zeroes. MariaDB automatically implements <code>INT</code>s with a display width so there is no need to specify it and doing so would reduce the portability of DDL as only MariaDB supports it.</li>\n<li><code>SIGNED</code> (the default) OR <code>UNSIGNED</code>.</li>\n<li><code>ZEROFILL</code> forces <code>UNSIGNED</code> i.e. it is a synonym for <code>UNSIGNED ZEROFILL</code> and <code>ZEROFILL UNSIGNED</code>.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Data types and aliases</th>\n<th>Bytes/range</th>\n<th>Options/comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DECIMAL</code>, <code>DEC</code>, <code>NUMERIC</code>, <code>FIXED</code> (Precision, Scale)<br /><br />When using Oracle Mode, <code>NUMBER</code> is also a synonym.</td>\n<td>“Precision” is total digits and max is 65 digits so max possible number is 10<sup>65</sup>-1 (which is 65 9s). The sign is not counted as part of the max digits and nor is the decimal point. If Precision is omitted it defaults to 10.<br /><br />“Scale” is the number of digits after the decimal point and the max is 38. If Scale is 0 then fractions cannot be stored. If Scale is omitted then it defaults to 0.<br /><br />Precision can only be omitted if Scale is also omitted.</td>\n<td><code>SIGNED</code> (the default) OR <code>UNSIGNED</code>.<br /><br /><code>ZEROFILL</code> forces <code>UNSIGNED</code> i.e. it is a synonym for <code>UNSIGNED ZEROFILL</code> and <code>ZEROFILL UNSIGNED</code><br /><br />Numbers with more digits after the decimal point than the defined Scale are stored as rounded to the nearest <code>DECIMAL</code> place.<br /><br />Arithmetic is done with a Precision of 65 digits.</td>\n</tr>\n<tr>\n<td><code>FLOAT</code></td>\n<td>A floating point number. The allowable values below are theoretical and depend on hardware and operating system.<br /><br />Allowable values are:<br />-3.402823466 × 10<sup>+38</sup> to -1.175494351 × 10<sup>-38</sup> (negative numbers); 0; 1.175494351 × 10<sup>-38</sup> to 3.402823466 × 10<sup>38</sup> (positive numbers).</td>\n<td><code>SIGNED</code> (default), <code>UNSIGNED</code> and <code>ZEROFILL</code>.<br /><br />Arithmetic in SQL using floating point numbers might give inaccurate or unexpected results as calculations have a limit on their precision, therefore it might be better to use <code>DECIMAL</code>. See: <a href=\"https://mariadb.com/kb/en/floating-point-accuracy/\">MariaDB floating point accuracy</a>.</td>\n</tr>\n<tr>\n<td><code>DOUBLE</code>, <code>DOUBLE PRECISION</code>, <code>REAL</code><br /><br /><code>REAL</code> is a synonym for <code>DOUBLE</code> unless using the <code>REAL_AS_FLOAT</code> SQL mode in which case it is a synonym for <code>FLOAT</code>.</td>\n<td>A normal-sized (double precision) floating point number. The allowable values below are theoretical and depend on hardware and operating system.<br /><br />Allowable values are:<br />-1.7976931348623157 × 10<sup>308</sup> to -2.2250738585072014 × 10<sup>-308</sup> (negative numbers); 0; 2.2250738585072014 × 10<sup>-308</sup> to 1.7976931348623157 × 10<sup>308</sup> (positive numbers).</td>\n<td><code>SIGNED</code> (default), <code>UNSIGNED</code> and <code>ZEROFILL</code>.</td>\n</tr>\n<tr>\n<td><code>BIT(n)</code></td>\n<td><code>BIT</code>s are Binary Numbers.<br /><br />Size is 1 to 64 bits.<br /><br /><code>BIT</code>s are <code>UNSIGNED</code> only.<br /><br />Range is 0 to 264 which is 18,446,744,073,709,551,616 in decimal (1 more than the max <code>BIGINT</code>).</td>\n<td><code>(n)</code> defines the number of bits and if omitted it defaults to 1 bit.<br /><br /><code>BIT</code>s are automatically left padded with zeroes e.g. in a <code>BIT(4)</code> field, ‘10’ is padded to ‘0010’ as if the <code>(n)</code> behaved like <code>ZEROFILL</code> for <code>INTEGER</code>s.<br /><br />They are returned as binary numbers so to display them either add 0 or use a function like <code>BIN()</code>, <code>OCT()</code> or <code>HEX()</code> to convert them.</td>\n</tr>\n<tr>\n<td><code>BOOLEAN</code>, <code>BOOL</code><br /><br />Synonym for <code>TINYINT(1)</code></td>\n<td>1 byte.<br /><br />Values are <code>TRUE</code> (Alias <code>1</code>), <code>FALSE</code> (Alias <code>0</code>) or <code>UNKNOWN</code> (Alias <code>NULL</code>).<br /><br />When storing a Boolean, any non-zero value is taken as <code>TRUE</code>.</td>\n<td>Use the <code>IS</code> operator with <code>BOOLEAN</code>s e.g. <code>10 IS TRUE</code> returns <code>1</code> (<code>TRUE</code>) but <code>10 = TRUE</code> returns <code>0</code> (<code>FALSE</code> because 10 does not equal 1)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"postgresql\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#postgresql\">PostgreSQL <!-- omit in toc --></a></h4>\n<ul>\n<li>PostgreSQL does not support Unsigned integers</li>\n<li>PostgreSQL does not support <code>ZEROFILL</code>, but you can pad numbers with the <code>TO_CHAR()</code> function — the result is <code>CHAR</code>, though</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Data types and aliases</th>\n<th>Bytes/range</th>\n<th>Options/comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>SMALLINT</code>, <code>INT2</code><br /><br /><code>SMALLSERIAL</code> is autoincrementing and has an alias of <code>SERIAL2</code>.</td>\n<td>2 bytes.<br /><br />Range: -32,768 to 32,767.<br /><br /><code>SMALLSERIAL</code>: 1 to 32,767.</td>\n<td><code>SMALLSERIAL</code> is not an <code>UNSIGNED SMALLINT</code>. It is like a <code>SIGNED SMALLINT</code> where values less than 1 are not allowed.</td>\n</tr>\n<tr>\n<td><code>INTEGER</code>, <code>INT</code>, <code>INT4</code><br /><br /><code>SERIAL</code> is autoincrementing and has an alias of <code>SERIAL4</code>.</td>\n<td>4 bytes.<br /><br />Range: -2,147,483,648 to 2,147,483,647.<br /><br /><code>SERIAL</code>: 1 to 2,147,483,647.</td>\n<td><code>SERIAL</code> is not an <code>UNSIGNED INTEGER</code>. It is like a <code>SIGNED INTEGER</code> where values less than 1 are not allowed.</td>\n</tr>\n<tr>\n<td><code>BIGINT</code>, <code>INT8</code><br /><br /><code>BIGSERIAL</code> is autoincrementing and has an alias of <code>SERIAL8</code>.</td>\n<td>8 bytes.<br /><br />Range: -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.<br /><br /><code>BIGSERIAL</code>:  1 to 9,223,372,036,854,775,807.</td>\n<td><code>BIGSERIAL</code> is not an <code>UNSIGNED BIGINT</code>. It is like a <code>SIGNED BIGINT</code> where values less than 1 are not allowed.</td>\n</tr>\n<tr>\n<td><code>DECIMAL</code>, <code>NUMERIC</code><br />(Precision, Scale)</td>\n<td>Supports up to 131,072 digits before the decimal point and up to 16,383 digits after the decimal point.<br /><br />“Precision” is total digits and max is (131,072 + 16,383) = 147,455 so max possible number is 10<sup>147455</sup>-1 (which is 147,455 9s!). Unlike MariaDB, if Precision is omitted there is no default — the number is constrained only by the limits of the implementation (e.g. operating system and hardware).<br /><br />“Scale” is the number of digits after the decimal point and the max is 16383. If Scale is 0 then fractions cannot be stored. If Scale is omitted then it defaults to 0.<br /><br />Precision can only be omitted if Scale is also omitted.</td>\n<td>Numbers with more digits after the decimal point than the defined Scale are stored as rounded to the nearest decimal place.<br /><br /><code>DECIMAL</code>s can have a negative Scale. Values will be rounded to the left of the decimal point. The precision still represents the maximum number of non-rounded digits. So, a column declared as <code>DECIMAL(2,-3)</code> rounds values to the nearest 1000 and can store values from -99000 to 99000.<br /><br />Scale can be greater than Precision. Such columns can only hold fractions and the number of 0 digits to the right of the decimal point must be ≥ the Scale, minus the Precision e.g. a <code>DECIMAL(3,5)</code> rounds values to 5 decimal places and can store values from -0.00999 to 0.00999.</td>\n</tr>\n<tr>\n<td><code>REAL</code>, <code>FLOAT4</code></td>\n<td>4 bytes.<br /><br />Supports at least 6 digits after the decimal point and at most 9 digits after the decimal point, depending on the hardware and operating system.<br /><br />Range is from 10<sup>-37</sup> to 10<sup>+37</sup>.</td>\n<td>Arithmetic in SQL using floating point numbers might give inaccurate or unexpected results as calculations have a limit on their precision, therefore it might be better to use <code>DECIMAL</code>/<code>NUMERIC</code>.</td>\n</tr>\n<tr>\n<td><code>DOUBLE PRECISION</code>, <code>FLOAT</code>, <code>FLOAT8</code></td>\n<td>8 bytes.<br /><br />Supports at least 15 digits after the decimal point and at most 17 digits after the decimal point, depending on the hardware and operating system.<br /><br />Range is from 10<sup>-307</sup> to 10<sup>+308</sup>.</td>\n<td>Note that <code>FLOAT</code> is 8 byte in PostgreSQL and Snowflake but 4 byte in MariaDB.</td>\n</tr>\n<tr>\n<td><code>BOOLEAN</code></td>\n<td>1 byte.<br /><br />Values are <code>TRUE</code> (Aliases <code>1</code>, <code>yes</code>, <code>on</code>), <code>FALSE</code> (Aliases <code>0</code>, <code>no</code>, <code>off</code>) or <code>NULL</code>.<br /><br />Selecting data from a Boolean gives <code>t</code>, <code>f</code> or <code>NULL</code>.</td>\n<td>Strings and numbers can be cast to <code>BOOLEAN</code> explicitly e.g. <code>'yes'::boolean</code>. PostgreSQL understands that <code>TRUE</code> and <code>FALSE</code> are Boolean but <code>NULL</code> could be anything so there may be circumstances where you have to cast <code>NULL</code> as boolean e.g. <code>NULL::boolean</code>.</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"snowflake\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#snowflake\">Snowflake <!-- omit in toc --></a></h4>\n<ul>\n<li>Snowflake does not support <code>SERIAL</code> data types but columns can be defined as <code>AUTOINCREMENT</code>.</li>\n<li>Snowflake does not support <code>ZEROFILL</code>, but you can left pad numbers with the <code>LPAD()</code> function.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Data types and aliases</th>\n<th>Bytes/range</th>\n<th>Options/comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>INT</code>, <code>INTEGER</code>, <code>BYTEINT</code>, <code>TINYINT</code>, <code>SMALLINT</code>, <code>BIGINT</code>.<br /><br />Synonymous with <code>NUMBER(38,0)</code>.</td>\n<td>Storage varies depending on the data you enter but is max of 8 bytes. Snowflake then applies the same storage size for all the column values within a partition.<br /><br />Range: -10<sup>38</sup>+1 to 10<sup>38</sup>-1.</td>\n<td>All integer types are the same in Snowflake. Aliases are supported for compatibility with other DBMS.</td>\n</tr>\n<tr>\n<td><code>DECIMAL</code>, <code>NUMERIC</code><br />(Precision, Scale)<br />Synonymous with <code>NUMBER</code>.</td>\n<td>38 digits are supported with up to 37 of those after the decimal point – <code>NUMBER(38,37)</code>.<br /><br />If Precision and Scale are omitted it defaults to <code>(38,0)</code>.</td>\n<td>Naturally, if data is converted into a data type with less precision, such as a <code>DOUBLE</code>, then converted back to a <code>DECIMAL</code>/<code>NUMBER</code>, precision may be lost.</td>\n</tr>\n<tr>\n<td><code>FLOAT</code>, <code>FLOAT4</code>, <code>FLOAT8</code>, <code>DOUBLE</code>, <code>DOUBLE PRECISION</code>, <code>REAL</code></td>\n<td>8 bytes.<br /><br />Range is from 10<sup>-308</sup> to 10<sup>308</sup>.<br /><br />Numbers from 10<sup>-324</sup> to 10<sup>-308</sup> can be represented with less precision.</td>\n<td>All floating point types are the same in Snowflake. Aliases are supported for compatibility with other DBMS.<br /><br />Because of the possibility of imprecision in floating point numbers, <code>NUMERIC</code> or <code>DECIMAL</code> should be used for precise results unless you really need to store numbers with more digits than they support.</td>\n</tr>\n<tr>\n<td><code>BOOLEAN</code></td>\n<td>Values are <code>TRUE</code>, <code>FALSE</code> or <code>NULL</code>. Also, <code>0</code> is <code>FALSE</code> and any other integer is <code>TRUE</code>.</td>\n<td>Numbers and strings such as ‘True’ and ‘False’ can be converted to and from <code>BOOLEAN</code>.<br /><br /><code>BOOLEAN</code> supports the Logical Operators <code>AND</code>, <code>OR</code> and <code>NOT</code>.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"alphanumeric-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#alphanumeric-2\">Alphanumeric</a></h3>\n<h4 id=\"mariadb-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#mariadb-1\">MariaDB <!-- omit in toc --></a></h4>\n<ul>\n<li>MariaDB has no data types that check whether JSON or XML is well-formed.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Data types and aliases</th>\n<th>Bytes/range</th>\n<th>Options/comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>BINARY(n)</code><br /><code>CHAR BYTE</code> is an alias for <code>BINARY(1)</code></td>\n<td>2<sup>8</sup>-1 (255) bytes</td>\n<td>Similar to <code>CHAR</code> but an store binary or hex numbers too. Comparison and Sorting is done on Binary Value, but can be cast as character to sort Alphabetically. Binaries are right-padded with zeroes on insert.</td>\n</tr>\n<tr>\n<td><code>VARBINARY(n)</code></td>\n<td>Same as <code>VARCHAR</code> except that it’s for storing binary strings (with no character set)</td>\n<td>Comparison and Sorting is done on Binary Value, but can be cast as character to sort Alphabetically. Binaries are right-padded with zeroes on insert.<br /><br /><code>VARBINARY</code> is not right-padded when inserting (unlike <code>BINARY</code>)</td>\n</tr>\n<tr>\n<td><code>TINYBLOB</code></td>\n<td>2<sup>8</sup>-1 (255) bytes</td>\n<td>Stored with a 1-byte prefix indicting the number of bytes in the values.</td>\n</tr>\n<tr>\n<td><code>BLOB</code> (Binary large object)</td>\n<td>2<sup>16</sup>-1 (65,535) bytes</td>\n<td>Stored with a 2-byte prefix indicating the number of bytes in the value.</td>\n</tr>\n<tr>\n<td><code>MEDIUMBLOB</code></td>\n<td>2<sup>24</sup>-1 (16,777,215) bytes</td>\n<td>Stored with a 3-byte prefix indicating the number of bytes in the value.</td>\n</tr>\n<tr>\n<td><code>LONGBLOB</code><br /><br />In Oracle Mode, <code>BLOB</code> is a synonym for <code>LONGBLOB</code>.</td>\n<td>2<sup>32</sup>-1 (4,294,967,295) bytes (4 GB)</td>\n<td>Stored with a 4-byte prefix indicating the number of bytes in the value. Max length depends on the max packet size in the client/server protocol and available memory.</td>\n</tr>\n<tr>\n<td><code>TINYTEXT</code></td>\n<td>2<sup>8</sup>-1 (255) bytes</td>\n<td>Stored with a 1-byte prefix indicting the number of bytes in the values.</td>\n</tr>\n<tr>\n<td><code>TEXT</code></td>\n<td>2<sup>16</sup>-1 (65,535) bytes</td>\n<td>Stored with a 2-byte prefix indicating the number of bytes in the value.</td>\n</tr>\n<tr>\n<td><code>MEDIUMTEXT</code><br /><code>LONG</code>, <code>LONG VARCHAR</code></td>\n<td>2<sup>24</sup>-1 (16,777,215) bytes</td>\n<td>Stored with a 3-byte prefix indicating the number of bytes in the value.</td>\n</tr>\n<tr>\n<td><code>LONGTEXT</code>,<br /><code>JSON</code> (for compatibility with MySQL).</td>\n<td>2<sup>32</sup>-1 (4,294,967,295) bytes (4 GB)</td>\n<td>Stored with a 4-byte prefix indicating the number of bytes in the value. Max length depends on the max packet size in the client/server protocol and available memory.<br /><br />If storing <code>JSON</code> the <code>JSON_VALID()</code> function can be used in a <code>CHECK CONSTRAINT</code> to ensure a valid JSON document is inserted.</td>\n</tr>\n<tr>\n<td><code>CHAR(n)</code></td>\n<td>0 to 255 characters (including multi-byte chars)</td>\n<td>Fixed-length character string right-padded with blanks.<br /><br />If <code>(n)</code> is omitted the number of chars defaults to 1.<br /><br /><code>(0)</code> can be specified for all storage engines except <code>CONNECT</code> and it has two valid values, empty string or <code>NULL</code>, and cannot be used in <code>INDEX</code>es.</td>\n</tr>\n<tr>\n<td><code>VARCHAR(n)</code></td>\n<td>Range is 0 to 65,532 bytes so the effective max for storing 3-byte UTF8 characters is <code>VARCHAR(21,844)</code></td>\n<td>Variable-length character string stored with a prefix to indicate the number of characters. Strings up to 255 bytes require a 1-byte prex and longer strings have a 2-byte prefix.<br /><br />(0) can be specified for all storage engines except CONNECT and it has two valid values, empty string or <code>NULL</code>, and cannot be used in <code>INDEX</code>es.</td>\n</tr>\n<tr>\n<td><code>UUID</code></td>\n<td>36 chars</td>\n<td>You can generate values with <code>UUID()</code> function or insert externally generated UUIDs with or without hyphens in multiple places. The <code>UUID</code> data type always displays UUIDs in standard format regardless of the inserted format. See <a href=\"https://mariadb.com/kb/en/uuid-data-type/\">MariaDB UUID data type</a> for a full list of supported formats.<br /><br /><code>SYS_GUID()</code> also generates UUIDs without hyphens for Oracle compatibility.<br /><br /><code>UUID_SHORT()</code> does not generate a valid UUID and therefore has limited usage.</td>\n</tr>\n<tr>\n<td><code>ENUM</code></td>\n<td>Theoretically up to 65,535 values but that depends on many factors</td>\n<td>A string object that can have only 1 value from a list of specified values. Internally they are represented as numbers so that storage can be substantially less than for strings which is their principal benefit. Numbering starts from 0.<br /><br /><code>ENUM</code>s can also be <code>NULL</code>, in which case the 0 value is an empty string. If a default is not declared, the default for NULLable ENUMs is <code>NULL</code> and for <code>NOT NULL</code> ENUMs the default is the first value in the enumeration.<br /><br />Sorting by an <code>ENUM</code> sorts in the numerical order of the integer that represents the string.<br /><br />Do not use <code>ENUM</code>s to store integers as there is no benefit and it is best not to use them in general as table-driven content is much better than hard-coded content from a maintenance point-of-view.</td>\n</tr>\n<tr>\n<td><code>SET</code></td>\n<td>Maximum of 64 members</td>\n<td>A string object that can have multiple values from a list of specified values.<br /><br />Because this is anti-relational (tables are better representations of <code>SET</code>s), it is advisable not to use <code>SET</code>s unless you really need it to solve a performance problem that cannot be solved in any other way.</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"postgresql-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#postgresql-1\">PostgreSQL <!-- omit in toc --></a></h4>\n<table>\n<thead>\n<tr>\n<th>Data types and aliases</th>\n<th>Bytes/range</th>\n<th>Options/comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>BYTEA</code></td>\n<td>Length limits are not documented</td>\n<td>Can be in HEX or Escape format.</td>\n</tr>\n<tr>\n<td><code>JSON</code>, <code>JSONB</code>, <code>XML</code></td>\n<td>Length limits are not documented</td>\n<td>These data types ensure XML/JSON is well-formed (as opposed to storing such data in text fields).<br /><br />JSON is faster to store than JSONB but JSONB parses json into a decomposed binary format so is faster to process as no reparsing is required. Most implementations should use JSONB.</td>\n</tr>\n<tr>\n<td><code>TEXT</code></td>\n<td>Completely unlimited other than by available disk space</td>\n<td>Strings up to 126 bytes have a 1-byte overhead for storing the length and longer strings have a 4-byte overhead.</td>\n</tr>\n<tr>\n<td><code>CHAR(n)</code><br /><code>CHARACTER(n)</code>, <code>BPCHAR(n)</code></td>\n<td></td>\n<td>Fixed-length character string right-padded with blanks.<br /><br />Note that <code>BPCHAR(n)</code> is fixed length and blank-padded, in contrast to <code>BPCHAR</code> without the <code>(n)</code> which is variable and unlimited (up to 10,485,760) length and blank-trimmed.<br /><br />Strings up to 126 bytes have a 1-byte overhead for storing the length and longer strings have a 4-byte overhead.</td>\n</tr>\n<tr>\n<td><code>VARCHAR(n)</code><br /><code>CHARACTER VARYING(n)</code><br /><code>BPCHAR</code></td>\n<td><code>(n)</code> is max number of characters and cannot exceed 10,485,760.<br /><br /><code>(n)</code> must be &gt; 0.</td>\n<td>Variable-length character string.<br /><br />If <code>(n)</code> is omitted any number of characters up to 10,485,760 can be stored.<br /><br />Note that <code>BPCHAR</code> is variable length and unlimited (up to 10,485,760) length, in contrast to <code>BPCHAR(n)</code> which is fixed-length and blank-padded.<br /><br />Strings up to 126 bytes have a 1-byte overhead for storing the length and longer strings have a 4-byte overhead.</td>\n</tr>\n<tr>\n<td><code>UUID</code></td>\n<td>36 chars stored as 128-bit</td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>ENUM</code></td>\n<td>Length limits are not documented</td>\n<td><code>CREATE TYPE typename AS ENUM ('value1','value2',…)</code> and then use the typename in a <code>CREATE TABLE</code> statement as if it was a data type.<br /><br />Sorting by an <code>ENUM</code> sorts in the numerical order of the integer that represents the string.<br /><br />Do not use <code>ENUM</code>s to store integers as there is no benefit and it is best not to use them in general as table-driven content is much better than hard-coded content from a maintenance point of view.</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"snowflake-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#snowflake-1\">Snowflake <!-- omit in toc --></a></h4>\n<table>\n<thead>\n<tr>\n<th>Data types and aliases</th>\n<th>Bytes/range</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>BINARY(n)</code><br /><code>VARBINARY(n)</code></td>\n<td>A sequence of 8-bit bytes.<br /><br />Up to 8,388,608 bytes. Only measured in bytes.<br /><br />Default is same as the max length.</td>\n</tr>\n<tr>\n<td><code>VARCHAR(n)</code><br /><code>TEXT(n)</code><br /><code>STRING(n)</code><br /><br /><code>CHAR(n)</code><br /><code>CHARACTER(n)</code><br /><br /><code>NCHAR(n)</code><br /><code>NVARCHAR(n)</code></td>\n<td>A sequence of Unicode UTF-8 characters.<br /><br />Default and max for <code>VARCHAR</code>/<code>TEXT</code>/<code>STRING</code> is 16,777,216 bytes. Max number of characters depends on whether using multibyte characters e.g. 8,388,608 2-byte characters, 6,291,456 3-byte characters or 4,194,304 4-byte characters. However the max number of characters is also affected (reduced) by using <code>COLLATION</code> — see <a href=\"https://docs.snowflake.com/en/sql-reference/data-types-text\">Snowflake text data types</a>.<br /><br />Default for <code>CHAR</code>/<code>CHARACTER</code> is 1 e.g. <code>CHAR</code> is synonymous with <code>VARCHAR(1)</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"temporal-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#temporal-2\">Temporal</a></h3>\n<h4 id=\"mariadb-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#mariadb-2\">MariaDB <!-- omit in toc --></a></h4>\n<ul>\n<li>MariaDB does not support storage of time zone data in temporal data types.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Data types and aliases</th>\n<th>Bytes/range</th>\n<th>Options/comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DATE</code></td>\n<td>‘1000-01-01’ to ‘9999-12-31’</td>\n<td>Just a date.<br /><br />Accepts dates in most sensible formats (see <a href=\"https://mariadb.com/kb/en/date-and-time-literals/\">MariaDB date and time literals</a>).<br /><br />‘0000-00-00’ is a special value, the zero-date, unless the <code>NO_ZERO_DATE</code> SQL mode is used. Components can also be set to zero e.g. ‘2024-00-30’, unless the <code>NO_ZERO_IN_DATE</code> SQL mode is used.</td>\n</tr>\n<tr>\n<td><code>TIME(n)</code></td>\n<td>‘-838:59:59.999999’ to ‘838:59:59.99999’.<br /><br />The <code>(n)</code> is microsecond precision from 0 to 6, 0 if not specified.</td>\n<td>Just a time. No time zone information.</td>\n</tr>\n<tr>\n<td><code>DATETIME(n)</code></td>\n<td>Same as a <code>DATE</code> concatenated with a <code>TIME</code>.<br /><br />The <code>(n)</code> is microsecond precision from 0 to 6, 0 if not specified.</td>\n<td>Date and time.</td>\n</tr>\n<tr>\n<td><code>TIMESTAMP(n)</code></td>\n<td>‘1970-01-01 00:00:01’ (UTC) to ‘2038-01-19 03:14:07’ (UTC) on 32-bit systems or to ‘2106-02-07 06:28:15’ (UTC) on 64-bit systems. With microseconds too.</td>\n<td>Internal respresentation is different from <code>DATETIME</code> — stored as the number of seconds since ‘1970-01-01 00:00:00’ (UTC).</td>\n</tr>\n<tr>\n<td><code>YEAR(n)</code></td>\n<td>1901 to 2155</td>\n<td>Inserting the number 0000 results in the year zero but inserting a string ‘0000’ results in the year 2000.<br /><br /><code>(n)</code> can either be 4 or 2 and is the number of digits in the Year. 4 is the default if <code>(n)</code> is not specified and <code>(2)</code> is only supported for compatibility with older systems (pre-MariaDB version 5.5.27).<br /><br /><code>YEAR(2)</code> supports values from 70 to 69 representing 1970 to 2069. Inserting 00 or ‘00’ into a <code>YEAR(2)</code> always results in the year 2000.</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"postgresql-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#postgresql-2\">PostgreSQL <!-- omit in toc --></a></h4>\n<ul>\n<li>PostgreSQL supports storage of time zone data in temporal data types.</li>\n<li>PostgreSQL has no equivalent of MariaDB’s <code>TIMESTAMP</code> in terms of how it is stored internally but given that they all result in ‘date with time’ then <code>TIMESTAMP</code> and <code>DATETIME</code> are conceptually identical from the user’s point of view across MariaDB, PostgreSQL and Snowflake. <code>TIMESTAMP</code> should be used for portability as PostgreSQL does not support <code>DATETIME</code>.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Data types and aliases</th>\n<th>Bytes/range</th>\n<th>Options/comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DATE</code></td>\n<td>4 bytes.<br /><br />4713 BC to 5,874,897 AD.</td>\n<td>Just a date.</td>\n</tr>\n<tr>\n<td><code>TIME(n)</code><br /><br /><code>WITHOUT TIME ZONE</code> or<br /><code>WITH TIME ZONE</code></td>\n<td><code>WITHOUT TIME ZONE</code> = 8 bytes and ranges from 00:00:00 to 24:00:00.<br /><br /><code>WITH TIME ZONE</code> = 12 bytes and ranges from 00:00:00+1559 to 24:00:00-1559.<br /><br />The <code>(n)</code> is microsecond precision from 0 to 6, 6 (no bound) if not specified.</td>\n<td>Just a time.</td>\n</tr>\n<tr>\n<td><code>TIMESTAMP(n)</code></td>\n<td>8 bytes.<br /><br />4724 BC to 294276 AD.<br /><br />The <code>(n)</code> is microsecond precision from 0 to 6, 6 (no bound) if not specified.</td>\n<td><code>TIMESTAMP</code> in PostgreSQL is the equivalent of <code>DATETIME</code> in MariaDB.</td>\n</tr>\n<tr>\n<td><code>INTERVAL</code></td>\n<td>-178,000,000 to 178,000,000 years.</td>\n<td>Has many options, including: <code>YEAR</code>, <code>MONTH</code>, <code>DAY</code>, <code>HOUR</code>, <code>MINUTE</code>, <code>SECOND</code>, <code>YEAR to MONTH</code>, <code>DAY TO HOUR</code>, <code>DAY TO MINUTE</code>, <code>DAY TO SECOND</code>, <code>HOUR to MINUTE</code>, <code>HOUR to SECOND</code>,  <code>MINUTE to SECOND</code>.</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"snowflake-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#snowflake-2\">Snowflake <!-- omit in toc --></a></h4>\n<table>\n<thead>\n<tr>\n<th>Data types and aliases</th>\n<th>Bytes/range</th>\n<th>Options/comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DATE</code></td>\n<td>Recommended range from 1582 AD to 9999 AD.<br /><br />Some dates outside this range are accepted but years earlier than 1582 should be avoided due to limitations on the Gregorian Calendar.</td>\n<td>Just a date.<br /><br />Most common date formats are accepted.</td>\n</tr>\n<tr>\n<td><code>TIME(n)</code></td>\n<td><code>(n)</code> specifies the precision and ranges from 0 to 9 decimal fractions of a second (i.e. nanosecond precision). The default if <code>(n)</code> is not specified is 9.</td>\n<td>Just a time. No time zone information.<br /><br />Format is HH:MI:SS.</td>\n</tr>\n<tr>\n<td><code>TIMESTAMP(n)</code><br /><code>DATETIME(n)</code><br /><br /><code>TIMESTAMP_NTZ(n)</code>, <code>TIMESTAMPNTZ(n)</code>, <code>TIMESTAMP WITHOUT TIME ZONE(n)</code><br /><br /><code>TIMESTAMP_LTZ(n)</code>, <code>TIMESTAMPLTZ(n)</code>, <code>TIMESTAMP WITH LOCAL TIME ZONE(n)</code><br /><br /><code>TIMESTAMP_TZ(n)</code>, <code>TIMESTAMPTZ(n)</code>, <code>TIMESTAMP WITH TIME ZONE(n)</code></td>\n<td>Recommended range from 1582 AD to 9999 AD.<br /><br />Some dates outside this range are accepted but years earlier than 1582 should be avoided due to limitations on the Gregorian Calendar.<br /><br /><code>(n)</code> specifies the precision and ranges from 0 to 9 decimal fractions of a second (i.e. nanosecond precision). The default if <code>(n)</code> is not specified is 9.</td>\n<td>Date with time.<br /><br /><code>DATETIME</code> is an alias for <code>TIMESTAMP_NTZ</code>. <code>TIMESTAMP</code> is always implemented as one of the three variations of <code>_NTZ</code>, <code>_LTZ</code> or <code>_TZ</code> depending on the value of the <code>TIMESTAMP_TYPE_MAPPING</code> session parameter and the default is <code>TIMESTAMP_NTZ</code>.<br /><br />Therefore <code>TIMESTAMP</code> never exists as a data type in the DB — it is always one of the three explicit time zone variations.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"spatial-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#spatial-2\">Spatial</a></h3>\n<h4 id=\"mariadb-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#mariadb-3\">MariaDB <!-- omit in toc --></a></h4>\n<table>\n<thead>\n<tr>\n<th>Data types and aliases</th>\n<th>Bytes/range</th>\n<th>Options/comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>POINT</code></td>\n<td>x and y planar coordinates</td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>LINESTRING</code></td>\n<td>Planar line constructed from a set of <code>POINT</code>s</td>\n<td>If the number of points is less than 2 the value is <code>NULL</code>.</td>\n</tr>\n<tr>\n<td><code>POLYGON</code></td>\n<td>Planar shape constructed from one or more closed-loop <code>LINESTRING</code>s (where the end-point is the same as the start-point), which are known as Rings (ExteriorRings and InteriorRings)</td>\n<td>A Polygon may have any number of InteriorRings (holes in the shape). OpenGIS specifies that a polygon should only have one ExteriorRing but MariaDB supports multiple ExteriorRings, overlapping or not.<br /><br />If any argument is not a closed-loop <code>LINESTRING</code> the result is <code>NULL</code>.</td>\n</tr>\n<tr>\n<td><code>MULTIPOINT</code></td>\n<td>A set of unconnected planar <code>POINT</code>s</td>\n<td>Like a <code>LINESTRING</code> except that the points are not connected by a line.</td>\n</tr>\n<tr>\n<td><code>MULTILINESTRING</code></td>\n<td>A set of planar lines constructed from <code>LINESTRING</code>s</td>\n<td>The lines may or may not be connected or be overlapping.<br /><br />If any argument is not a <code>LINESTRING</code> the result is <code>NULL</code>.</td>\n</tr>\n<tr>\n<td><code>MULTIPOLYGON</code></td>\n<td>A set of planar Polygons with or without InteriorRings, constructed from <code>POLYGON</code>s</td>\n<td>If any argument is not a <code>POLYGON</code> the result is <code>NULL</code>.</td>\n</tr>\n<tr>\n<td><code>GEOMETRY</code></td>\n<td>A planar geometry constructed from any combination of <code>POINT</code>s, <code>LINESTRING</code>s, <code>POLYGON</code>s, <code>MULTIPOINT</code>s, <code>MULTILINESTRING</code>s and <code>MULTIPOLYGON</code>s</td>\n<td>If any arguments are not well-formed the result is <code>NULL</code>.</td>\n</tr>\n<tr>\n<td><code>GEOMETRYCOLLECTION</code></td>\n<td>A set of planar geometrys constructed from <code>GEOMETRY</code>s</td>\n<td>If any argument is not a well-formed <code>GEOMETRY</code> the result is <code>NULL</code>.</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"postgresql-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#postgresql-3\">PostgreSQL <!-- omit in toc --></a></h4>\n<table>\n<thead>\n<tr>\n<th>Data types and aliases</th>\n<th>Bytes/range</th>\n<th>Options/comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>POINT</code></td>\n<td>x and y planar coordinates</td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>LINE</code><br /><br /><code>LINE SEGMENT</code><br /><br /><code>PATH</code></td>\n<td>May be <code>INFINITE</code> (A,B,C), or <code>FINITE</code>, expressed as a set of planar <code>POINT</code>s.<br /><br /><code>FINITE LINE</code>s, <code>LINE SEGMENT</code>s and <code>PATH</code>s are the equivalent of MariaDB’s <code>LINESTRING</code>.</td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>BOX</code></td>\n<td>Pairs of points that represent the opposite corners of a 2D square (as opposed to a 3D box)</td>\n<td>In MariaDB a <code>POLYGON</code> would be used to represent a square. <code>BOX</code> is somewhat of a misnomer in PostgreSQL.</td>\n</tr>\n<tr>\n<td><code>CIRCLE</code></td>\n<td>Represented by a center point and a radius</td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>POLYGON</code></td>\n<td>Planar shape constructed from a closed loop of <code>POINT</code>s</td>\n<td>Does not directly support InteriorRings but one or more <code>POLYGON</code>s could be specified separately as InteriorRings to another <code>POLYGON</code>, given an appropriate data structure.</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"snowflake-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#snowflake-3\">Snowflake <!-- omit in toc --></a></h4>\n<ul>\n<li>Snowflake has two spatial data types, <code>GEOGRAPHY</code> and <code>GEOMETRY</code>:\n<ul>\n<li><code>GEOGRAPHY</code> plots objects and points on a sphere approximating our planet.</li>\n<li><code>GEOMETRY</code> plots objects and points on a flat plane.</li>\n</ul>\n</li>\n<li>Each of the functions can format and store data in both of these data types. The functions correspond to data types in other databases such as MariaDB.</li>\n<li>Refer to <a href=\"https://docs.snowflake.com/en/sql-reference/data-types-geospatial\">https://docs.snowflake.com/en/sql-reference/data-types-geospatial</a> to use Snowflake <code>GEOGRAPHY</code> or <code>GEOMETRY</code> types and functions:\n<ul>\n<li><code>POINT()</code></li>\n<li><code>LINESTRING()</code></li>\n<li><code>POLYGON()</code></li>\n<li><code>MULTILINESTRING()</code></li>\n<li><code>MULTIPOLYGON()</code></li>\n<li><code>GEOMETRYCOLLECTION()</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"arrays-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#arrays-2\">Arrays</a></h3>\n<h4 id=\"mariadb-4\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#mariadb-4\">MariaDB <!-- omit in toc --></a></h4>\n<ul>\n<li>MariaDB does not support <code>ARRAY</code>s. Alternatives are to normalise <code>ARRAY</code>s as tables or to use <code>JSON</code>.</li>\n</ul>\n<h4 id=\"postgresql-4\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#postgresql-4\">PostgreSQL <!-- omit in toc --></a></h4>\n<ul>\n<li><code>ARRAY</code>s in PostgreSQL are limited to a single data type and do not support key/value pairs so there is no direct equivalent of PostgreSQL <code>ARRAY</code>s in Snowflake because the Snowflake data types can contain anything. However, Snowflake <code>ARRAY</code>s can be made to look like or contain the same data as PostgreSQL <code>ARRAY</code>s.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Data types and aliases</th>\n<th>Bytes/range</th>\n<th>Options/comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DataType[n]</code><br /><br /><code>Datatype ARRAY[n]</code></td>\n<td><code>[n]</code> is the number of elements in the <code>ARRAY</code>.<br /><br />There is no max size and any specified array size limits are ignore by the database — they are just documentation and users must control what goes into an <code>ARRAY</code>.</td>\n<td>A 1-dimensional array of the specified data type with the number of elements defined in square brackets e.g. <code>INTEGER[4]</code> is equivalent to<br /><code>INTEGER ARRAY(4)</code>.</td>\n</tr>\n<tr>\n<td><code>Datatype[na][nb]…</code></td>\n<td><code>[na]</code> and <code>[nb]</code> define the size of each dimension of the <code>ARRAY</code>.<br /><br />There is no max size, any specified array size limits are ignored by the database and number of dimensions is also ignored — they are just documentation and users must control what goes into a multi-dimensional <code>ARRAY</code>.</td>\n<td>A multi-dimensional <code>ARRAY</code> of the specified data type with the size of each dimensional defined in square brackets.<br /><br />Note that the <code>Datatype ARRAY</code> syntax is not valid for creating multi-dimensional <code>ARRAY</code>s.</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"snowflake-4\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#snowflake-4\">Snowflake <!-- omit in toc --></a></h4>\n<ul>\n<li>Structured <code>ARRAY</code> data types in Snowflake are only supported for Iceberg tables.</li>\n<li><code>MAP</code>s are structured types and not documented here.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Data types and aliases</th>\n<th>Bytes/range</th>\n<th>Options/comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>VARIANT</code> (unstructured or semi-structured)</td>\n<td>No max size documented</td>\n<td>A <code>VARIANT</code> can store a mixture of any other data types, including <code>OBJECT</code>s and <code>ARRAY</code>s.</td>\n</tr>\n<tr>\n<td><code>ARRAY</code> (unstructured or semi-structured)</td>\n<td>No max size documented</td>\n<td>An <code>ARRAY</code> is a set of <code>VARIANT</code>s. Each element in the <code>ARRAY</code> is a <code>VARIANT</code> and can therefore contain anything, including more <code>ARRAY</code>s.<br /><br /><code>ARRAY</code>s can be dense or sparse. Dense <code>ARRAY</code>s start with element number 0 and the elements are sequential and contiguous. Sparse <code>ARRAY</code>s need not start with element 0, and can be non-contiguous (so <code>ARRAY</code> elements may not be populated) such as an <code>ARRAY</code> that has element numbers (2,4,7,13).</td>\n</tr>\n<tr>\n<td><code>OBJECT</code> (unstructured or semi-structured)</td>\n<td>No max size documented</td>\n<td>An <code>OBJECT</code> stores key-value pairs and is therefore a good option for storing <code>JSON</code>.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"special-types\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#special-types\">Special types</a></h3>\n<h4 id=\"postgresql-5\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#postgresql-5\">PostgreSQL <!-- omit in toc --></a></h4>\n<ul>\n<li>For PostgreSQL-only databases it can better to store network addresses in dedicated fields rather than plain text types because these types have input error checking and specialized operators and functions. However they are not portable as no other DBMS have data types like these.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Data types and aliases</th>\n<th>Bytes/range</th>\n<th>Options/comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>money</code></td>\n<td>Fixed fractional precision determined by database’s <code>lc_monetary</code> setting</td>\n<td>–</td>\n</tr>\n<tr>\n<td><code>cidr</code></td>\n<td>7 or 19 bytes</td>\n<td>IPv4 and IPv6 network addresses</td>\n</tr>\n<tr>\n<td><code>inet</code></td>\n<td>7 or 19 bytes</td>\n<td>IPv4 and IPv6 host and network addresses</td>\n</tr>\n<tr>\n<td><code>macaddr</code></td>\n<td>6 bytes</td>\n<td>MAC addresses</td>\n</tr>\n<tr>\n<td><code>macaddr8</code></td>\n<td>8 bytes</td>\n<td>MAC addresses (EUI-64 format)</td>\n</tr>\n<tr>\n<td><code>INT4RANGE</code><br /><code>INT4MULTIRANGE</code></td>\n<td>Range/multirange of 4 byte <code>INTEGER</code></td>\n<td>Ranges can be normalised into tables in databases that do not explicitly support them.</td>\n</tr>\n<tr>\n<td><code>INT8RANGE</code><br /><code>INT8MULTIRANGE</code></td>\n<td>Range/multirange of 8 byte <code>INTEGER</code></td>\n<td>〃</td>\n</tr>\n<tr>\n<td><code>NUMRANGE</code><br /><code>NUMMULTIRANGE</code></td>\n<td>Range/multirange of <code>NUMERIC</code> (fixed point decimals)</td>\n<td>〃</td>\n</tr>\n<tr>\n<td><code>TSRANGE</code><br /><code>TSMULTIRANGE</code></td>\n<td>Range/multirange of <code>TIMESTAMP WITHOUT TIME ZONE</code></td>\n<td>〃</td>\n</tr>\n<tr>\n<td><code>TSTZRANGE</code><br /><code>TSTZMULTIRANGE</code></td>\n<td>Range/multirange of <code>TIMESTAMP WITH TIME ZONE</code></td>\n<td>〃</td>\n</tr>\n<tr>\n<td><code>DATERANGE</code><br /><code>DATEMULTIRANGE</code></td>\n<td>Range/multirange of <code>DATE</code></td>\n<td>〃</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"snowflake-5\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/data-type-portability-guide/#snowflake-5\">Snowflake <!-- omit in toc --></a></h4>\n<table>\n<thead>\n<tr>\n<th>Data types and aliases</th>\n<th>Bytes/range</th>\n<th>Options/comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>VECTOR</code> (type, length)</td>\n<td>–</td>\n<td><code>VECTOR</code> is a misnomer because vectors are normally considered to have a directional component but Snowflake’s <code>VECTOR</code> data type has length only.<br /><br />“type” can be either <code>INT</code> or <code>FLOAT</code> and determines the data type in which the “length” is expressed.</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2024-09-05T00:00:00Z"
    },{
      "id": "https://chronicles.campachoochoo.net/route-maps-with-datawrapper/",
      "url": "https://chronicles.campachoochoo.net/route-maps-with-datawrapper/",
      "title": "Using Datawrapper to visualise airline route maps",
      "content_html": "<p>Continuing from my <a href=\"https://chronicles.campachoochoo.net/route-maps-with-datawrapper/2024-02-07-route-maps-with-qgis.md\">previous post</a>, I wanted to try using a different tool to plot great circles on a map and was enticed by what an online tool would offer.</p>\n<p>Datawrapper is a data visualisation tool that I’ve long admired. It has sensible,\n<a href=\"https://blog.datawrapper.de/dualaxis/\">opinionated defaults</a>, abundant chart types and features, and a\n<a href=\"https://blog.datawrapper.de/\">superb companion blog</a>.</p>\n<p>To display quantitative data by geography, Datawrapper offers the ability to create choropleth and symbol maps. To show\nmaps with icons and labels — as I’d like to do with this airline route map — we can use its locator map type.\nThe result will be a responsive, static map.</p>\n<p>To import line markers to Datawrapper, the format must be in GeoJSON. As the output of <a href=\"https://github.com/pwrignall/gclines/\">the script</a> I used to prepare data for QGIS was CSV, I altered it to also produce a pair of GeoJSON files: one containing\nthe route lines and one with airport points and labels (Datawrapper can also load points from a CSV but I added the\nGeoJSON option anyway).</p>\n<p>Since the steps to <a href=\"https://academy.datawrapper.de/article/176-how-to-import-area-line-markers\">add line markers</a>\nand <a href=\"https://academy.datawrapper.de/article/179-how-to-import-point-markers\">add point markers</a> are so well documented\nby Datawrapper, I’ll skip through the process except to mention that the there is a warning about the tool slowing\ndown if you load lots of point markers (for example with the 24 in the example I’ve used here).</p>\n<p>After some basic styling and tweaking label positions to try to minimise the amount of overlaps, here’s the result\ndirectly embedded from Datawrapper:</p>\n<div style=\"min-height:520px\"><script type=\"text/javascript\" defer=\"\" src=\"https://datawrapper.dwcdn.net/ug91F/embed.js?v=7\" charset=\"utf-8\"></script><noscript><img src=\"https://datawrapper.dwcdn.net/ug91F/full.png\" alt=\"A hypothetical airline route map to demonstrate how to make them with Datawrapper\" /></noscript></div>\n<p>I think the result looks a little better on desktop than mobile but with some tweaking of the options and adding two\nsets of point labels, one optimised for desktop and the other for mobile, we can get some very nice results with little\nfuss because of how much effort Datawrapper has clearly spent on its users’ experience.</p>\n<p>Being able to quickly and easily make a responsive, annotated map like this is invaluable and an excellent addition to\nany data visualisation toolkit.</p>\n",
      "date_published": "2024-04-27T00:00:00Z"
    },{
      "id": "https://chronicles.campachoochoo.net/route-maps-with-qgis/",
      "url": "https://chronicles.campachoochoo.net/route-maps-with-qgis/",
      "title": "How to create an airline route map with QGIS",
      "content_html": "<p>This guide will take you through the steps to plot a route map in QGIS, with lines between points as great circles.</p>\n<p>When I worked at an aviation news and data company called <a href=\"https://www.flightglobal.com/\">FlightGlobal</a>, we occasionally\nwanted to display a map showing newly-announced routes, the geographical reach of a carrier, or the top n routes in a\nregion.</p>\n<p>For static maps, intended to be printed, I used the excellent geographic information system application,\n<a href=\"https://qgis.org/\">QGIS</a>. Whilst my process most certainly could be streamlined, I’m laying it out here so if you ever\nfeel like mapping some routes, you can too!</p>\n<h2 id=\"data-prep\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/route-maps-with-qgis/#data-prep\">Data prep</a></h2>\n<p>Route maps tend to use <a href=\"https://en.wikipedia.org/wiki/Great-circle_distance\">great circles</a> to connect points on a map.\nBecause of things like weather these are not the exact coordinates an aircraft would follow, but they’re used because\nthey’re the shortest distance between two points. And they look nice.</p>\n<p>I had an R script I used to use for this. But I’ve lost it. My attempt to re-write it in Python took a while but,\nthanks to the <a href=\"https://geographiclib.sourceforge.io/Python/doc/examples.html\">geographiclib</a> package and its\nexamples, I got something working that does a decent job.</p>\n<p>The <a href=\"https://github.com/pwrignall/gclines\">script is on GitHub</a> with instructions and takes a couple of inputs to\nproduce two outputs: a file containing unique airports, <em>airport_points.csv</em>, and a file containing all\nthe points needed to create the great circle lines in QGIS, <em>route_points.csv</em>.</p>\n<h2 id=\"adding-data-layers-to-qgis\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/route-maps-with-qgis/#adding-data-layers-to-qgis\">Adding data layers to QGIS</a></h2>\n<p>Once you’ve <a href=\"https://qgis.org/en/site/forusers/download.html\">installed QGIS</a>, you’ll need to add your data as layers\nin the application. Once all of your data layers are in, you can experiment with different styles and map projections.</p>\n<h3 id=\"map-base-layer\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/route-maps-with-qgis/#map-base-layer\">Map base layer</a></h3>\n<p>For this I recommend the brilliant <a href=\"https://www.naturalearthdata.com/\">Natural Earth</a> project. Medium scale should be\nfine for this use case, so you can navigate to the <em>1:50m Physical</em> downloads and save the <em>Land</em> layer — which\nincludes polygons for land and major islands of the world — to a working directory on your device.</p>\n<ol>\n<li>\n<p>In QGIS, in an empty project, add that layer through the menu options: <strong>Layer → Add Layer → Add Vector\nLayer…</strong></p>\n</li>\n<li>\n<p>By <em>Vector Dataset(s)</em>, browse to your downloaded Natural Earth .zip file and then click <strong>Add</strong>. Close this dialog\nbox.</p>\n</li>\n</ol>\n<figure><a href=\"https://chronicles.campachoochoo.net/assets/images/qgis-routes/01-basemap.png\"><img src=\"https://chronicles.campachoochoo.net/assets/images/qgis-routes/01-basemap.png\" alt=\"After adding your land layer you should have something\nlike this.\" loading=\"lazy\" style=\"\" /></a><figcaption>After adding your land layer you should have something\nlike this.</figcaption></figure>\n<h3 id=\"route-points\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/route-maps-with-qgis/#route-points\">Route points</a></h3>\n<p>Now we’ll use the outputs from the earlier script and add them as another layer to the project. For this example, I’ve\nplotted the hypothetical route travelled by the Champions League trophy since 1993, from the venue of that year’s final\nin Munich (MUC) through all the winners’ nearest airports and the other final venues.</p>\n<ol start=\"3\">\n<li>\n<p>Click <strong>Layer → Add Layer → Add Delimited Text Layer…</strong></p>\n</li>\n<li>\n<p>By <em>File Name</em>, browse to your working directory and select the <strong>route_points.csv</strong> file.</p>\n</li>\n<li>\n<p>Under <em>File Format</em>, verify <strong>CSV</strong> is selected.</p>\n</li>\n<li>\n<p>Under <em>Geometry Definition</em>, select <strong>EPSG:4326 - WGS 84</strong> as the <em>Geometry CRS</em> and click <strong>Add</strong>. You can then\nclose this dialog.</p>\n</li>\n<li>\n<p>With the route_points layer selected, find the <strong>Zoom to Layer</strong> button on the toolbar or within the <em>View</em> menu to\nzoom in and focus on your routes, if you like.</p>\n</li>\n</ol>\n<figure><a href=\"https://chronicles.campachoochoo.net/assets/images/qgis-routes/02-route-points.png\"><img src=\"https://chronicles.campachoochoo.net/assets/images/qgis-routes/02-route-points.png\" alt=\"Blobs on shapes, zoomed in. We'll style this later.\" loading=\"lazy\" style=\"\" /></a><figcaption>Blobs on shapes, zoomed in. We’ll style this later.</figcaption></figure>\n<h3 id=\"points-to-lines\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/route-maps-with-qgis/#points-to-lines\">Points to lines</a></h3>\n<p>Whilst there are QGIS plugins to convert point pairs to lines, I don’t think they had all the features I was looking\nfor. I may revisit this and see if <a href=\"https://plugins.qgis.org/plugins/Beeline/\">Beeline</a> (which led me to the Python\nfunctions I used in my own script) can offer a simpler alternative to what I’m doing.\nInstead, I’ve used a plugin called <a href=\"https://plugins.qgis.org/plugins/points2one/\">Points2One</a> to transform the long list\nof longitude/latitude coordinate sequences to a set of lines.</p>\n<p>Install the plugin through the menu, <strong>Plugins → Manage and Install Plugins…</strong> and search for\n“Points2One”.</p>\n<ol start=\"8\">\n<li>\n<p>Select the Points2One dialog through <strong>Vector → Points2One → Points2One</strong>.</p>\n</li>\n<li>\n<p><em>Input vector layer</em> should be <strong>route_points</strong>. You’ll want to <strong>Create lines</strong> and <em>Group features by</em> <strong>route</strong>.\nEnter an <em>Output shapefile</em> filename in which your lines will be saved and check the <em>Add result to canvas</em> box:</p>\n</li>\n</ol>\n<figure><a href=\"https://chronicles.campachoochoo.net/assets/images/qgis-routes/03-points2one.png\"><img src=\"https://chronicles.campachoochoo.net/assets/images/qgis-routes/03-points2one.png\" alt=\"Points2One options.\" loading=\"lazy\" style=\"\" /></a><figcaption>Points2One options.</figcaption></figure>\n<ol start=\"10\">\n<li>Click <strong>OK</strong> and <strong>Close</strong> on the Points2One dialog.</li>\n</ol>\n<figure><a href=\"https://chronicles.campachoochoo.net/assets/images/qgis-routes/04-blobs-and-lines.png\"><img src=\"https://chronicles.campachoochoo.net/assets/images/qgis-routes/04-blobs-and-lines.png\" alt=\"Lines connecting the blobs.\" loading=\"lazy\" style=\"\" /></a><figcaption>Lines connecting the blobs.</figcaption></figure>\n<h3 id=\"airport-points\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/route-maps-with-qgis/#airport-points\">Airport points</a></h3>\n<p>Our final layer will be marks for the individual airports. This was the other output file generated by the earlier\nscript.</p>\n<ol start=\"11\">\n<li>\n<p>Click <strong>Layer → Add Layer → Add Delimited Text Layer…</strong></p>\n</li>\n<li>\n<p>By <em>File Name</em>, browse to your working directory and select the <strong>airport_points.csv</strong> file.</p>\n</li>\n<li>\n<p>Ensure <em>File Format</em> is <strong>CSV</strong> and <em>Geometry CRS</em> is <strong>EPSG:4326 - WGS 84</strong>. Click <strong>Add</strong> and close the dialog.\nBecause our route points include the airports as start and end points, this addition won’t be obvious until we adjust\nthe styling.</p>\n</li>\n</ol>\n<h2 id=\"changing-the-map-s-appearance\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/route-maps-with-qgis/#changing-the-map-s-appearance\">Changing the map’s appearance</a></h2>\n<h3 id=\"layer-symbology\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/route-maps-with-qgis/#layer-symbology\">Layer symbology</a></h3>\n<p>Editing symbology, or how layers are styled — sometimes based on some data attribute like you would do on a\nchoropleth — can be done by double-clicking a layer in QGIS. You can choose an in-built style or make up your own.\nYou can modify object fills and strokes and that’s all I’ll be doing for this map, using <strong>Simple Fill</strong>, <strong>Simple\nLine</strong> and <strong>Simple Marker</strong> depending on the layer type.</p>\n<p>You can also adjust the canvas colour through <strong>Project → Properties → General → Background color</strong>.</p>\n<p>Toggle a layer’s visibility completely by clicking the eye-shaped icon next to a layer. We want to do this now for the\nroute_points layer.</p>\n<figure><a href=\"https://chronicles.campachoochoo.net/assets/images/qgis-routes/05-after-some-styling.png\"><img src=\"https://chronicles.campachoochoo.net/assets/images/qgis-routes/05-after-some-styling.png\" alt=\"Choosing colours is hard.\" loading=\"lazy\" style=\"\" /></a><figcaption>Choosing colours is hard.</figcaption></figure>\n<h3 id=\"airport-labels\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/route-maps-with-qgis/#airport-labels\">Airport labels</a></h3>\n<p>We can add text labels to give the viewer an idea of which airport is where.</p>\n<p>Double-click the airport_points layer then select <strong>Labels</strong>. Choose <strong>Single Labels</strong> from the dropdown. For <em>Value</em>\nI’m using the Expression Builder next to the field dropdown and have entered <code>&quot;iata_code&quot;  || ' ' || &quot;loc_name&quot;</code> which\nwill concatenate the airport code and municipality (maybe not the most intuitive name in all cases, as you’ll see) from\nthe airports input file.</p>\n<p>Within this dialog you can adjust the label font, placement and any text effects like buffers and shadows.</p>\n<figure><a href=\"https://chronicles.campachoochoo.net/assets/images/qgis-routes/06-label-maker.png\"><img src=\"https://chronicles.campachoochoo.net/assets/images/qgis-routes/06-label-maker.png\" alt=\"Adding a buffer to improve legibility.\" loading=\"lazy\" style=\"\" /></a><figcaption>Adding a buffer to improve legibility.</figcaption></figure>\n<h3 id=\"map-projection\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/route-maps-with-qgis/#map-projection\">Map projection</a></h3>\n<p>When the geographic extent of a map is limited to a specific region, it’s a good opportunity to use a different map\nprojection to minimise the distortions we make when flattening a sphere onto a rectangle.</p>\n<p>My go-to tool for choosing a good projection is <a href=\"https://projectionwizard.org/\">Projection Wizard</a>. With it, we can\nspecify the boundaries of the map and receive some suggested projections in return. For this region, I’ll optimise by\nequal area and use an Albers equal-area conic projection. The tool also gives the coordinate string you need\nfor QGIS in either proj4 or WKT formats. QGIS accepts both but prefers WKT.</p>\n<p>Within QGIS, define a new projection from <strong>Settings → Custom Projections…</strong> Click the plus icon to add a\nnew projection, give it a name and paste the text from Projection Wizard into the <em>Parameters</em> box. Click <strong>OK</strong>.</p>\n<p>Now re-project your map to the newly-defined projection by selecting <strong>Project → Properties…</strong>. In the\ndialog click <strong>CRS</strong> (Coordinate Reference System). Within <em>Predefined Coordinate Reference Systems</em> scroll down until\nyou see some under <strong>User-defined</strong> and select the name you just created. Click <strong>OK</strong> and there’s your re-projected\nmap!</p>\n<p>From here you can export the map as an image or PDF to further tweak it. Here’s my end product, after exporting and\nadding a title. I also took the opportunity to edit airport_points.csv and tidy up the location name labels.</p>\n<figure><a href=\"https://chronicles.campachoochoo.net/assets/images/qgis-routes/07-reprojected.png\"><img src=\"https://chronicles.campachoochoo.net/assets/images/qgis-routes/07-reprojected.png\" alt=\"Lots of visits to Milan, Munich and Madrid.\" loading=\"lazy\" style=\"\" /></a><figcaption>Lots of visits to Milan, Munich and Madrid.</figcaption></figure>\n<h2 id=\"summary\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/route-maps-with-qgis/#summary\">Summary</a></h2>\n<p>And that’s it, although quite an involved process end-to-end this doesn’t take too long once you’re used to it. Except\nmaybe choosing the colours. With this method you can create quite detailed explanatory maps as well as more abstract\nones like this. Enjoy!</p>\n<figure><a href=\"https://chronicles.campachoochoo.net/assets/images/qgis-routes/08-world-lines.png\"><img src=\"https://chronicles.campachoochoo.net/assets/images/qgis-routes/08-world-lines.png\" alt=\"Route information from openflights.org\" loading=\"lazy\" style=\"\" /></a><figcaption>Route information from openflights.org</figcaption></figure>",
      "date_published": "2024-02-07T00:00:00Z"
    },{
      "id": "https://chronicles.campachoochoo.net/coffeeneur-completion/",
      "url": "https://chronicles.campachoochoo.net/coffeeneur-completion/",
      "title": "Coffeeneur completion",
      "content_html": "<p>Rounding off the <a href=\"https://chasingmailboxes.com/2023/09/24/coffeeneuring-challenge-2023-lucky-13/\">2023 Coffeeneuring Challenge</a> with a fizzle.</p>\n<p>I only just managed to squeeze in today’s ride to complete the requisite seven rides, leaving it to the last minute as I often do.</p>\n<h2 id=\"today-s-ride\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/coffeeneur-completion/#today-s-ride\">Today’s ride</a></h2>\n<p>It almost went wrong, I headed out for a late lunch and meandered to make up the minimum two-mile distance rule before arriving at my planned coffee stop to realise it was closed on Mondays.</p>\n<p>So, I continued in the direction of <strong>Chalk Hills Bakery</strong>, a kiosk attached to the bakery itself which meant enjoying a ‘Coffee Shop Without Walls’. At least I remembered to bring a KeepCup and avoid a paper cup.</p>\n<p></p><figure><a href=\"https://chronicles.campachoochoo.net/assets/images/coffeeneuring-2023/2023-11-20_01-chalk-hills.jpg\">\n    <img src=\"https://chronicles.campachoochoo.net/assets/images/coffeeneuring-2023/2023-11-20_01-chalk-hills.jpg\" alt=\"\" loading=\"lazy\" /></a>\n    <figcaption>Coffee al fresco</figcaption>\n  </figure><p></p>\n<p>So, that’s it, an end to a thoroughly enjoyable challenge which I expected to complete with a little more time to spare but saw me:</p>\n<ul>\n<li>Cycle 67.6 kilometres over seven rides</li>\n<li>Consume five cappuccinos (campachoochoos), one cortado and one flat white</li>\n<li>Get my bike pretty filthy</li>\n<li>Have fun and feel good!</li>\n</ul>\n<p>Until next year!</p>\n",
      "date_published": "2023-11-20T00:00:00Z"
    },{
      "id": "https://chronicles.campachoochoo.net/planet-sweet/",
      "url": "https://chronicles.campachoochoo.net/planet-sweet/",
      "title": "Coffee at Planet Sweet",
      "content_html": "<p>In which I enjoy a bacon and brie panini at a place with an excellent name.</p>\n<h2 id=\"today-s-ride\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/planet-sweet/#today-s-ride\">Today’s ride</a></h2>\n<p>Today’s Coffeeneur was #6 of the <a href=\"https://chasingmailboxes.com/2023/09/24/coffeeneuring-challenge-2023-lucky-13/\">2023 Coffeeneuring Challenge</a> and one I tied in with some lunchtime errands.</p>\n<p><strong>Coffee at Planet Sweet</strong> was the name of my destination and served up a delightful bacon and brie panini alongside a very frothy coffee.</p>\n<p>It felt great to get out into the fresh air for a bit before back to grappling with some data for the rest of the afternoon.</p>\n<p></p><figure><a href=\"https://chronicles.campachoochoo.net/assets/images/coffeeneuring-2023/2023-11-17_01-planet-sweet.jpg\">\n    <img src=\"https://chronicles.campachoochoo.net/assets/images/coffeeneuring-2023/2023-11-17_01-planet-sweet.jpg\" alt=\"\" loading=\"lazy\" /></a>\n    <figcaption>Bacon, brie, and coffee. Who could ask for anything more?</figcaption>\n  </figure><p></p>\n",
      "date_published": "2023-11-17T00:00:00Z"
    },{
      "id": "https://chronicles.campachoochoo.net/electric-coffee/",
      "url": "https://chronicles.campachoochoo.net/electric-coffee/",
      "title": "High voltage coffee",
      "content_html": "<p>After visiting the tooth doctor, sampling the coffee somewhere recommended to me by a friend.</p>\n<h2 id=\"today-s-ride\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/electric-coffee/#today-s-ride\">Today’s ride</a></h2>\n<p>Following a dentist’s appointment in the morning, I was in a different part of town to usual so took it as an opportunity to try my latest Coffeeneur venture on different roads to a completely new destination for me.</p>\n<p>I caught a break in the steady rain showers and made my way to Ealing Broadway and <strong><a href=\"https://www.electriccoffee.co.uk/\">Electric Coffee Co</a></strong>, where I grabbed a bag of beans from Malawi alongside a tasty cortado.</p>\n<p>The place was busy, friendly, and I’d recommend it if you’re ever in W5.</p>\n<p></p><figure><a href=\"https://chronicles.campachoochoo.net/assets/images/coffeeneuring-2023/2023-11-16_01-electric-coffee.jpg\">\n    <img src=\"https://chronicles.campachoochoo.net/assets/images/coffeeneuring-2023/2023-11-16_01-electric-coffee.jpg\" alt=\"\" loading=\"lazy\" /></a>\n    <figcaption>A cortado at Electric Coffee Co</figcaption>\n  </figure><p></p>\n<p>Read more about the <a href=\"https://chasingmailboxes.com/2023/09/24/coffeeneuring-challenge-2023-lucky-13/\">2023 Coffeeneuring Challenge</a>.</p>\n",
      "date_published": "2023-11-16T00:00:00Z"
    },{
      "id": "https://chronicles.campachoochoo.net/commute-coffeeneur/",
      "url": "https://chronicles.campachoochoo.net/commute-coffeeneur/",
      "title": "A Coffeeneuring commute",
      "content_html": "<p>Sneaking in a Coffeeneur during my commute to the office in central London.</p>\n<p><em>(Writing this up ten days after it took place, I just didn’t get around to it.)</em></p>\n<h2 id=\"today-s-ride\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/commute-coffeeneur/#today-s-ride\">Today’s ride</a></h2>\n<p>It was a miserable, rain-filled morning, and I got soaked on the ten-minute ride from home to my local railway station. I planned to take a fast train to Victoria and try <strong>Omotesando Koffee</strong> on my way to the office in EC2. This plan disintegrated with railway signalling problems.</p>\n<p>Instead I took the next London-bound train and it proceeded to chug slowly along the track, seemingly overtaken at every opportunity by the trains scheduled behind it. An hour and twenty minutes later than I originally thought I’d be in London, I alighted at Blackfriars.</p>\n<p>Still, what better way to forget that journey than by finding a nice place for a hot drink and some breakfast? I’d used the time on the train to plot a route to <strong>The Ethiopian Coffee Company</strong>, not far from King’s Cross.</p>\n<p>Thankfully the rain had eased from earlier and, apart from getting beeped by an impatient Mercedes driver, the journey to Islington was an uneventful one.</p>\n<p></p><figure><a href=\"https://chronicles.campachoochoo.net/assets/images/coffeeneuring-2023/2023-11-01_01-amwell-street.jpg\">\n    <img src=\"https://chronicles.campachoochoo.net/assets/images/coffeeneuring-2023/2023-11-01_01-amwell-street.jpg\" alt=\"\" loading=\"lazy\" /></a>\n    <figcaption>A lovely coffee spot</figcaption>\n  </figure><p></p>\n<p>One cappuccino plus one cheese and ham toastie later, I was good to go!</p>\n<p>Read more about the <a href=\"https://chasingmailboxes.com/2023/09/24/coffeeneuring-challenge-2023-lucky-13/\">2023 Coffeeneuring Challenge</a>.</p>\n",
      "date_published": "2023-11-01T00:00:00Z"
    },{
      "id": "https://chronicles.campachoochoo.net/coffeeneuring-car-dropoff/",
      "url": "https://chronicles.campachoochoo.net/coffeeneuring-car-dropoff/",
      "title": "Running errands and a Coffeeneur",
      "content_html": "<p>Time for the car’s annual MOT and service, so I made it a Coffeeneuring opportunity.</p>\n<h2 id=\"today-s-ride\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/coffeeneuring-car-dropoff/#today-s-ride\">Today’s ride</a></h2>\n<p>I packed my fold-up bike into the boot and set off bright and early to drop the car off at the garage.\nI made use of the new automated key drop-off locker system there and set off on my way back home.</p>\n<p>Although rain was forecast, fortunately none arrived. There was still plenty of surface water from the last few days.</p>\n<p>On route, just outside <a href=\"https://en.wikipedia.org/wiki/Beehive,_Gatwick_Airport\">The Beehive</a> — Gatwick’s original terminal building — I stopped at <strong>Flavours Deli</strong> for a cappuccino served by the friendly lady there. And then home.</p>\n<p></p><figure><a href=\"https://chronicles.campachoochoo.net/assets/images/coffeeneuring-2023/2023-10-20_01-coffee-at-flavours.jpg\">\n    <img src=\"https://chronicles.campachoochoo.net/assets/images/coffeeneuring-2023/2023-10-20_01-coffee-at-flavours.jpg\" alt=\"\" loading=\"lazy\" /></a>\n    <figcaption>Enjoying a cappuccino at Flavours Deli</figcaption>\n  </figure><p></p>\n<p>Read more about the <a href=\"https://chasingmailboxes.com/2023/09/24/coffeeneuring-challenge-2023-lucky-13/\">2023 Coffeeneuring Challenge</a>.</p>\n",
      "date_published": "2023-10-20T00:00:00Z"
    },{
      "id": "https://chronicles.campachoochoo.net/ubuntu-setup-steps/",
      "url": "https://chronicles.campachoochoo.net/ubuntu-setup-steps/",
      "title": "Consider these steps when fresh-installing Ubuntu",
      "content_html": "<p>Whether freshly installing Ubuntu on a new bit of hardware or within WSL, there are a few steps I like to follow to get the basics set up nicely.</p>\n<p>These steps are lifted directly from elsewhere but having them here in a single page makes for a helpful checklist.</p>\n<h2 id=\"software-tools\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/ubuntu-setup-steps/#software-tools\">Software/tools</a></h2>\n<h3 id=\"python\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/ubuntu-setup-steps/#python\">Python</a></h3>\n<h4 id=\"virtualenvwrapper\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/ubuntu-setup-steps/#virtualenvwrapper\">virtualenvwrapper</a></h4>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> python3-virtualenvwrapper</code></pre>\n<p>Then add the following to <code>~/.bashrc</code>:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">WORKON_HOME</span><span class=\"token operator\">=</span><span class=\"token environment constant\">$HOME</span>/.virtualenvs\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">PROJECT_HOME</span><span class=\"token operator\">=</span><span class=\"token environment constant\">$HOME</span>/code\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">VIRTUALENVWRAPPER_PYTHON</span><span class=\"token operator\">=</span>/usr/bin/python3\n<span class=\"token builtin class-name\">source</span> /usr/share/virtualenvwrapper/virtualenvwrapper.sh</code></pre>\n<h3 id=\"node-js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/ubuntu-setup-steps/#node-js\">Node.js</a></h3>\n<p>Here, just following the <a href=\"https://www.theodinproject.com/lessons/foundations-installing-node-js\">guidance steps from The Odin Project</a>.</p>\n<h4 id=\"node-version-manager\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/ubuntu-setup-steps/#node-version-manager\">Node Version Manager</a></h4>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade\n<span class=\"token function\">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh <span class=\"token operator\">|</span> <span class=\"token function\">bash</span>\n<span class=\"token comment\"># Verify nvm is installed:</span>\n<span class=\"token builtin class-name\">command</span> <span class=\"token parameter variable\">-v</span> nvm</code></pre>\n<h4 id=\"node\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/ubuntu-setup-steps/#node\">Node</a></h4>\n<pre class=\"language-bash\"><code class=\"language-bash\">nvm <span class=\"token function\">install</span> <span class=\"token parameter variable\">--lts</span>\nnvm use <span class=\"token parameter variable\">--lts</span>\n<span class=\"token comment\"># Verify node is installed</span>\n<span class=\"token function\">node</span> <span class=\"token parameter variable\">-v</span></code></pre>\n<h2 id=\"configuration\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/ubuntu-setup-steps/#configuration\">Configuration</a></h2>\n<h3 id=\"bash-prompt\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/ubuntu-setup-steps/#bash-prompt\">Bash prompt</a></h3>\n<p>I like the minimalism offered by this <a href=\"https://code.mendhak.com/simple-bash-prompt-for-developers-ps1-git/\">simple and effective Bash prompt</a>, which is a result of this addition to <code>~/.bashrc</code>:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> <span class=\"token function-name function\">parse_git_dirty</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">git</span> status <span class=\"token parameter variable\">--porcelain</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> /dev/null<span class=\"token variable\">)</span></span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"*\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">parse_git_branch</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">git</span> branch --no-color <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> /dev/null <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'/^[^*]/d'</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"s/* \\(.*\\)/ (<span class=\"token entity\" title=\"\\1\">\\1</span><span class=\"token variable\"><span class=\"token variable\">$(</span>parse_git_dirty<span class=\"token variable\">)</span></span>)/\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PS1</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token entity\" title=\"\\n\">\\n</span><span class=\"token entity\" title=\"\\t\">\\t</span> \\[<span class=\"token entity\" title=\"\\033\">\\033</span>[32m\\]\\w\\[<span class=\"token entity\" title=\"\\033\">\\033</span>[33m\\]\\<span class=\"token variable\"><span class=\"token variable\">$(</span>parse_git_branch<span class=\"token variable\">)</span></span>\\[<span class=\"token entity\" title=\"\\033\">\\033</span>[00m\\] $ \"</span></code></pre>\n<h3 id=\"git\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/ubuntu-setup-steps/#git\">Git</a></h3>\n<p>Configure user name and e-mail, and some aliases for nicer git logging:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"bob.loblaw\"</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"bob.loblaw@users.noreply.github.com\"</span>\n\n<span class=\"token comment\"># Git log graph view, all branches, commits ordered by graph topology</span>\n<span class=\"token comment\"># In this view, commit ordering from top to bottom is not by time, but subject to the graph topology, i.e. the dependencies between commits can be viewed easily.</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.l <span class=\"token string\">\"log --format='%C(yellow)%h%C(reset) %C(auto)%d%C(reset) %s %C(magenta)(%an)%C(reset) %C(cyan)(%ar)%C(reset)' --all --graph --topo-order\"</span>\n\n<span class=\"token comment\"># Git log graph view, all branches, commits ordered by commit date</span>\n<span class=\"token comment\"># In this view, a commit graph is displayed showing the dependencies between commits, but the ordering of the commits if by time. This leads to longer graph edges in some cases, but it is sometimes more intuitive to see commits in order of their creation time.</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.ld <span class=\"token string\">\"log --format='%C(yellow)%h%C(reset) %C(auto)%d%C(reset) %s %C(magenta)(%an)%C(reset) %C(cyan)(%ar)%C(reset)' --all --graph --date-order\"</span></code></pre>\n<h2 id=\"wsl-specific-steps\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/ubuntu-setup-steps/#wsl-specific-steps\">WSL-specific steps</a></h2>\n<h3 id=\"serve-ssh-keys-to-wsl2-from-keepassxc-on-the-host\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/ubuntu-setup-steps/#serve-ssh-keys-to-wsl2-from-keepassxc-on-the-host\">Serve SSH keys to WSL2 from KeepassXC on the host</a></h3>\n<p>Again, thanks to the efforts of others who’ve done the hard work to <a href=\"https://code.mendhak.com/wsl2-keepassxc-ssh/#all-together-in-one-script\">make this a simple setup script</a>!</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Get npiperelay\"</span>\n<span class=\"token function\">wget</span> https://github.com/jstarks/npiperelay/releases/latest/download/npiperelay_windows_amd64.zip\n<span class=\"token function\">unzip</span> <span class=\"token parameter variable\">-o</span> npiperelay_windows_amd64.zip <span class=\"token parameter variable\">-d</span> npiperelay\n<span class=\"token function\">rm</span> npiperelay_windows_amd64.zip\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Install socat\"</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> socat\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Add to .bashrc\"</span>\n<span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'EOF'<span class=\"token bash punctuation\"> <span class=\"token operator\">>></span> ~/.bashrc</span>\nexport SSH_AUTH_SOCK=$HOME/.ssh/agent.sock\n\nss -a | grep -q $SSH_AUTH_SOCK\nif [ $? -ne 0 ]; then\n    rm -f $SSH_AUTH_SOCK\n    (setsid socat UNIX-LISTEN:$SSH_AUTH_SOCK,fork EXEC:\"$HOME/npiperelay/npiperelay.exe -ei -s //./pipe/openssh-ssh-agent\",nofork &amp;) >/dev/null 2>&amp;1\nfi\nEOF</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Reload ~/.bashrc\"</span>\n<span class=\"token builtin class-name\">exec</span> <span class=\"token function\">bash</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Done\"</span></code></pre>\n",
      "date_published": "2023-10-15T00:00:00Z"
    },{
      "id": "https://chronicles.campachoochoo.net/coffeeneuring-bacon-bap/",
      "url": "https://chronicles.campachoochoo.net/coffeeneuring-bacon-bap/",
      "title": "Coffeeneuring 2023 - Ride 2",
      "content_html": "<p>Continuing the Coffeeneuring Challenge from last week, the sun’s still high but the temperature’s not.</p>\n<p>What a difference a week makes. Temperatures are a little more seasonal than <a href=\"https://chronicles.campachoochoo.net/coffeeneuring-bacon-bap/2023-10-08-coffeeneuring-kick-off.md\">last week’s outing</a> but a significant 15°C drop. Puffy jackets and jeans instead of t-shirts and shorts today!</p>\n<h2 id=\"today-s-ride\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/coffeeneuring-bacon-bap/#today-s-ride\">Today’s ride</a></h2>\n<p>Since I was a little short on time today, I just popped to the local recreation ground’s café, making sure to meet the challenge’s two-mile round trip minimum.</p>\n<p></p><figure><a href=\"https://chronicles.campachoochoo.net/assets/images/coffeeneuring-2023/2023-10-15_01-coffee-and-bacon-bap.jpg\">\n    <img src=\"https://chronicles.campachoochoo.net/assets/images/coffeeneuring-2023/2023-10-15_01-coffee-and-bacon-bap.jpg\" alt=\"\" loading=\"lazy\" /></a>\n    <figcaption>A bacon bap and a cappuccino</figcaption>\n  </figure><p></p>\n<p>Read more about the <a href=\"https://chasingmailboxes.com/2023/09/24/coffeeneuring-challenge-2023-lucky-13/\">2023 Coffeeneuring Challenge</a>.</p>\n",
      "date_published": "2023-10-15T00:00:00Z"
    },{
      "id": "https://chronicles.campachoochoo.net/coffeeneuring-kick-off/",
      "url": "https://chronicles.campachoochoo.net/coffeeneuring-kick-off/",
      "title": "Kicking off the 2023 Coffeeneuring Challenge",
      "content_html": "<p>In a Discord which I’m a member of, someone posted a link to the <a href=\"https://chasingmailboxes.com/2023/09/24/coffeeneuring-challenge-2023-lucky-13/\">2023 Coffeeneuring Challenge</a>. It tickled my interest.</p>\n<h2 id=\"the-challenge\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/coffeeneuring-kick-off/#the-challenge\">The challenge</a></h2>\n<p>From the site, “If you ride a bike, drink coffee or tea (or even hot chocolate, coffee stouts, or cider), and enjoy low-key adventures please consider this fall endeavor.” All of these things appeal to me, so I considered it! In short:</p>\n<blockquote>\n<ul>\n<li>between October 7 through November 20, 2023,</li>\n<li>ride your bike to 7 places,</li>\n<li>at least 2 miles round trip each time,</li>\n<li>drink 7 total cups of coffee (or another fall-type beverage), and</li>\n<li>document your coffeeneuring (either photos, Strava tracks, journal entries, control card, etc.) in case the Coffeeneuring Challenge Committee and the Intern (yes, the Intern is back!) ever conducts an audit.</li>\n</ul>\n</blockquote>\n<p>Having taken some time off exercise after the peak of the summer, it seemed an achievable, enjoyable way to get back into some regular activities and a good opportunity to explore the area around me.</p>\n<h3 id=\"today-s-ride\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/coffeeneuring-kick-off/#today-s-ride\">Today’s ride</a></h3>\n<figure><a href=\"https://chronicles.campachoochoo.net/assets/images/coffeeneuring-2023/2023-10-08_01-strava-map.jpg\"><img src=\"https://chronicles.campachoochoo.net/assets/images/coffeeneuring-2023/2023-10-08_01-strava-map.jpg\" alt=\"Today's ride details from Strava\" loading=\"lazy\" style=\"width: calc(50% - 0.5em);\" /></a><figcaption>Today’s ride details from Strava</figcaption></figure>\n<p>This won’t be breaking any records anytime soon — I’m not even sure the calorie burn matched the cake intake — but on an unseasonably warm October day with temperatures at around 20°C it was a fantastic way to spend an hour and a bit out of the house.</p>\n<p>My mid-ride destination was <strong><a href=\"https://thearchive.works/pages/info\">The Archive</a></strong>, a great cycling clubhouse which served a very good cappuccino and an excellent coffee and walnut cake.</p>\n<p></p><figure><a href=\"https://chronicles.campachoochoo.net/assets/images/coffeeneuring-2023/2023-10-08_02-coffee-and-walnut-cake.jpg\">\n    <img src=\"https://chronicles.campachoochoo.net/assets/images/coffeeneuring-2023/2023-10-08_02-coffee-and-walnut-cake.jpg\" alt=\"\" loading=\"lazy\" /></a>\n    <figcaption>Coffee cake and cappuccino</figcaption>\n  </figure><p></p>\n<h2 id=\"enter-the-campachoochoo-chronicles\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"https://chronicles.campachoochoo.net/coffeeneuring-kick-off/#enter-the-campachoochoo-chronicles\">Enter the Campachoochoo Chronicles</a></h2>\n<p>Since one of the requirements of the challenge is to “document your coffeeneuring”, and I’ve wanted to set up an online space for writing about this kind of thing — and more — I took it as a sign to get this done.</p>\n<p>I’m planning to include the rest of my coffeeneuring exploits as well as: noting things I’ve found interesting that I want to find again later, sharing (hopefully) useful bits of information that aren’t easy to find elsewhere, and getting better at writing.</p>\n<p>The “campachoochoo” part of the name is courtesy of Bob Mortimer and one of his <a href=\"https://mashable.com/article/bob-mortimer-train-guy\">‘Train Guy’ catchphrases</a>. No affiliation with it, I just like the word!</p>\n<p>Thanks to Mendhak’s <a href=\"https://github.com/mendhak/eleventy-satisfactory\">Eleventy Satisfactory Blog Theme</a> and its excellent documentation to help get me going.</p>\n",
      "date_published": "2023-10-08T00:00:00Z"
    }
  ]
}
